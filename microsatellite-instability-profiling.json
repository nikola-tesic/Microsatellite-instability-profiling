{
  "sbg:canvas_x": -57,
  "sbg:createdOn": 1495218807,
  "description": "This workflow enables profiling microsatellite instability using WXS or WGS data. It uses BWA-MEM for read alignment, lobSTR for calling microsatellite variants, and MSIsensor for quantifying microsatellite instability. It can be executed in two modes:\n\n1. Paired tumor normal sample mode - that enables differentiating somatic changes from germline variants at microsatellite loci; this mode leverages MSIsensor to obtain a measure of microsatellite instability [1]. VCFs containing results of lobSTR allelotyping [2] at a set of reference microsatellite loci, for both the normal and tumor samples is also outputted.\n\n2. Tumor sample only mode - in which case only the output of lobSTR allelotyping will be obtained.\n\nRequired inputs into the workflow include:\n\n*   Reference genome assembly in FASTA format, or a TAR bundle produced by BWA-MEM Index, which will be used in read alignment. If a TAR bundle is provided, the reference will not be (re)indexed, resulting in shorter execution times. \n*   lobSTR reference and index bundle, available for UCSC HG19 and GRCh37 genome builds. This is a TAR bundle available on the Seven Bridges platform, prebuilt and distributed with the lobSTR package. The chosen bundle must match the reference genome assembly used for read alignment.\n*   Stutter and step PCR noise model files, appropriate for the particular library prep protocol used for samples under analysis. These files can be obtained by running the lobSTR Train Model tool.\n*   Tumor sample reads in FASTQ format (gzipped input accepted). If providing paired-end reads in separate files, make sure to set the appropriate metadata fields accordingly.\n\nIf performing paired tumor normal analysis, besides the normal sample reads, it is necessary to provide a list of microsatellites that MSIsensor will use. A prebuilt list for HG19 is available on the platform, and lists for other genome builds can be generated using MSIsensor scan tool. \n\nNote that it is necessary to explicitly list chromosome names that should be treated as haploid by lobSTR Allelotype. For example, if processing reads from a male sample, aligned to HG19, 'chrX,chrY' should be inputted in the appropriate field under the App Settings tab.\n\nThe output VCFs will contain a list of all microsatellite loci that were allelotyped by lobSTR, with the ALT allele field left blank ('.') if no microsatellite variations were reported.\n\n[1] Niu et al. (2014) Bioinformatics 30(7): 1015-1016.\n[2] Gymrek et al. (2012) Genome Res. 22(6): 1154-1162",
  "sbg:canvas_zoom": 0.7999999999999998,
  "sbg:createdBy": "nikola_tesic",
  "sbg:sbgMaintained": false,
  "id": "https://api.sbgenomics.com/v2/apps/nikola_tesic/poster/microsatellite-instability-profiling/1/raw/",
  "sbg:latestRevision": 1,
  "sbg:projectName": "poster",
  "sbg:project": "nikola_tesic/poster",
  "outputs": [
    {
      "sbg:x": 1916.2500000000005,
      "sbg:includeInPorts": true,
      "required": false,
      "id": "#somatic_loci",
      "sbg:y": 456.2499809265138,
      "type": [
        "null",
        "File"
      ],
      "source": [
        "#MSIsensor_msi_0_2.somatic_loci"
      ],
      "label": "somatic_loci"
    },
    {
      "sbg:x": 1920.0000000000005,
      "sbg:includeInPorts": true,
      "required": false,
      "id": "#msi_score",
      "sbg:y": 588.7500000000001,
      "sbg:fileTypes": "TXT",
      "type": [
        "null",
        "File"
      ],
      "source": [
        "#MSIsensor_msi_0_2.msi_score"
      ],
      "label": "msi_score"
    },
    {
      "sbg:x": 1915.0000000000005,
      "sbg:includeInPorts": true,
      "required": false,
      "id": "#germline_loci",
      "sbg:y": 322.50000000000006,
      "type": [
        "null",
        "File"
      ],
      "source": [
        "#MSIsensor_msi_0_2.germline_loci"
      ],
      "label": "germline_loci"
    },
    {
      "sbg:x": 1728.7500000000005,
      "sbg:includeInPorts": true,
      "required": false,
      "id": "#filtered_vcf",
      "sbg:y": 47.500019073486335,
      "sbg:fileTypes": "VCF",
      "type": [
        "null",
        {
          "items": "File",
          "type": "array"
        }
      ],
      "source": [
        "#lobSTR_Filter_VCF_4_0_6.filtered_vcf"
      ],
      "label": "filtered_vcf"
    },
    {
      "sbg:x": 1725.0000000000005,
      "sbg:includeInPorts": true,
      "required": false,
      "id": "#filtering_stats",
      "sbg:y": -98.75000953674319,
      "sbg:fileTypes": "STATS",
      "type": [
        "null",
        {
          "items": "File",
          "type": "array"
        }
      ],
      "source": [
        "#lobSTR_Filter_VCF_4_0_6.filtering_stats"
      ],
      "label": "filtering_stats"
    },
    {
      "sbg:x": 1730.0000152587893,
      "sbg:includeInPorts": true,
      "required": false,
      "id": "#allelotype_stats",
      "sbg:y": 207.4999885559083,
      "sbg:fileTypes": "STATS",
      "type": [
        "null",
        {
          "items": "File",
          "type": "array"
        }
      ],
      "source": [
        "#lobSTR_Allelotype_4_0_6.allelotype_stats"
      ],
      "label": "allelotype_stats"
    },
    {
      "sbg:x": 1917.5000000000005,
      "sbg:includeInPorts": true,
      "required": false,
      "id": "#aligned_reads",
      "sbg:y": 137.50000000000003,
      "sbg:fileTypes": "SAM, BAM",
      "type": [
        "null",
        "File"
      ],
      "source": [
        "#BWA_MEM_Bundle.aligned_reads"
      ],
      "label": "aligned_reads"
    },
    {
      "sbg:x": 958.7500000000001,
      "sbg:includeInPorts": true,
      "required": false,
      "id": "#report_zip",
      "sbg:y": 331.2499618530274,
      "type": [
        "null",
        "File"
      ],
      "source": [
        "#FastQC_Analysis.report_zip"
      ],
      "label": "report_zip"
    },
    {
      "sbg:x": 961.2500000000001,
      "sbg:includeInPorts": true,
      "required": false,
      "id": "#b64html",
      "sbg:y": 470.0000000000001,
      "type": [
        "null",
        "File"
      ],
      "source": [
        "#FastQC_Analysis.b64html"
      ],
      "label": "b64html"
    }
  ],
  "sbg:appVersion": [
    "sbg:draft-2"
  ],
  "sbg:revisionsInfo": [
    {
      "sbg:revisionNotes": null,
      "sbg:modifiedBy": "nikola_tesic",
      "sbg:modifiedOn": 1495218807,
      "sbg:revision": 0
    },
    {
      "sbg:revisionNotes": null,
      "sbg:modifiedBy": "nikola_tesic",
      "sbg:modifiedOn": 1495219270,
      "sbg:revision": 1
    }
  ],
  "class": "Workflow",
  "sbg:contributors": [
    "nikola_tesic"
  ],
  "label": "Microsatellite instability profiling",
  "sbg:license": "GNU General Public License v3.0 only",
  "sbg:validationErrors": [],
  "sbg:modifiedOn": 1495219270,
  "sbg:toolkit": "lobSTR 4.0.6, MSIsensor 0.2, BWA, FastQC",
  "hints": [
    {
      "class": "sbg:AWSInstanceType",
      "value": "c4.8xlarge.ebs20"
    }
  ],
  "steps": [
    {
      "sbg:x": 802.5000000000002,
      "outputs": [
        {
          "id": "#BWA_INDEX.indexed_reference"
        }
      ],
      "id": "#BWA_INDEX",
      "sbg:y": 43.02083969116212,
      "run": {
        "sbg:revisionsInfo": [
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1459166575,
            "sbg:revision": 0
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1459166575,
            "sbg:revision": 1
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1459166575,
            "sbg:revision": 2
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1461762648,
            "sbg:revision": 3
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1462904153,
            "sbg:revision": 4
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1465231636,
            "sbg:revision": 5
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1465298968,
            "sbg:revision": 6
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1466173969,
            "sbg:revision": 7
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1466173969,
            "sbg:revision": 8
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1466173969,
            "sbg:revision": 9
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1466173969,
            "sbg:revision": 10
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1466173969,
            "sbg:revision": 11
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1466173969,
            "sbg:revision": 12
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1466173969,
            "sbg:revision": 13
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1466173969,
            "sbg:revision": 14
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884288,
            "sbg:revision": 15
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884288,
            "sbg:revision": 16
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884288,
            "sbg:revision": 17
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884288,
            "sbg:revision": 18
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884288,
            "sbg:revision": 19
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884288,
            "sbg:revision": 20
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884288,
            "sbg:revision": 21
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884288,
            "sbg:revision": 22
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884288,
            "sbg:revision": 23
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884288,
            "sbg:revision": 24
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884288,
            "sbg:revision": 25
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884288,
            "sbg:revision": 26
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468402324,
            "sbg:revision": 27
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468402324,
            "sbg:revision": 28
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468402324,
            "sbg:revision": 29
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468402324,
            "sbg:revision": 30
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468853028,
            "sbg:revision": 31
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1469619149,
            "sbg:revision": 32
          }
        ],
        "sbg:cmdPreview": "/opt/bwa-0.7.13/bwa index reference.fasta   -a bwtsw      -6    ; tar -cf reference.fasta.tar reference.fasta *.amb *.ann *.bwt *.pac *.sa",
        "sbg:createdOn": 1459166575,
        "description": "BWA INDEX constructs the FM-index (Full-text index in Minute space) for the reference genome.\nGenerated index files will be used with BWA MEM, BWA ALN, BWA SAMPE and BWA SAMSE tools.\n\nIf input reference file has TAR extension it is assumed that BWA indices came together with it. BWA INDEX will only pass that TAR to the output. If input is not TAR, the creation of BWA indices and its packing in TAR file (together with the reference) will be performed.",
        "sbg:toolAuthor": "Heng Li",
        "sbg:createdBy": "sevenbridges",
        "temporaryFailCodes": [],
        "id": "admin/sbg-public-data/bwa-index/32",
        "inputs": [
          {
            "type": [
              "null",
              "int"
            ],
            "sbg:category": "Configuration",
            "id": "#total_memory",
            "description": "Total memory [GB] to be reserved for the tool (Default value is 1.5 x size_of_the_reference).",
            "label": "Total memory [Gb]"
          },
          {
            "sbg:stageInput": "link",
            "sbg:category": "File input",
            "description": "Input reference fasta of TAR file with reference and indices.",
            "required": true,
            "id": "#reference",
            "sbg:fileTypes": "FASTA,FA,FA.GZ,FASTA.GZ,TAR",
            "type": [
              "File"
            ],
            "label": "Reference"
          },
          {
            "type": [
              "null",
              "string"
            ],
            "sbg:category": "Configuration",
            "id": "#prefix_of_the_index_to_be_output",
            "description": "Prefix of the index [same as fasta name].",
            "label": "Prefix of the index to be output"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-a"
            },
            "sbg:category": "Configuration",
            "sbg:toolDefaultValue": "auto",
            "description": "Algorithm for constructing BWT index. Available options are:s\tIS linear-time algorithm for constructing suffix array. It requires 5.37N memory where N is the size of the database. IS is moderately fast, but does not work with database larger than 2GB. IS is the default algorithm due to its simplicity. The current codes for IS algorithm are reimplemented by Yuta Mori. bwtsw\tAlgorithm implemented in BWT-SW. This method works with the whole human genome. Warning: `-a bwtsw' does not work for short genomes, while `-a is' and `-a div' do not work not for long genomes.",
            "id": "#bwt_construction",
            "type": [
              "null",
              {
                "type": "enum",
                "name": "bwt_construction",
                "symbols": [
                  "bwtsw",
                  "is",
                  "div"
                ]
              }
            ],
            "label": "Bwt construction"
          },
          {
            "sbg:category": "Configuration",
            "sbg:toolDefaultValue": "10000000",
            "description": "Block size for the bwtsw algorithm (effective with -a bwtsw).",
            "id": "#block_size",
            "type": [
              "null",
              "int"
            ],
            "label": "Block size"
          },
          {
            "type": [
              "null",
              "boolean"
            ],
            "sbg:category": "Configuration",
            "id": "#add_64_to_fasta_name",
            "description": "Index files named as <in.fasta>64 instead of <in.fasta>.*.",
            "label": "Output index files renamed by adding 64"
          }
        ],
        "sbg:project": "admin/sbg-public-data",
        "outputs": [
          {
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#reference",
              "glob": {
                "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return reference_file\n  }\n  else{\n    return reference_file + '.tar'\n  }\n}\n",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              }
            },
            "description": "TARed fasta with its BWA indices.",
            "id": "#indexed_reference",
            "sbg:fileTypes": "TAR",
            "type": [
              "null",
              "File"
            ],
            "label": "TARed fasta with its BWA indices"
          }
        ],
        "arguments": [
          {
            "separate": true,
            "valueFrom": {
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.bwt_construction){\n    return ''\n  } else {\n    return '-a ' + $job.inputs.bwt_construction\n  }\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": true,
            "valueFrom": {
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.prefix){\n    return ''\n  } else {\n    return '-p ' + $job.inputs.prefix\n  }\n}\n",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": true,
            "valueFrom": {
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.block_size){\n    return ''\n  } else {\n    return '-b ' + $job.inputs.block_size\n  }\n}\n\n",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": true,
            "valueFrom": {
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.add_64_to_fasta_name){\n    return ''\n  } else {\n    return '-6 '\n  }\n}\n",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": true,
            "valueFrom": {
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return ''\n  }\n  else{\n    tar_cmd = 'tar -cf ' + reference_file + '.tar ' + reference_file + ' *.amb' + ' *.ann' + ' *.bwt' + ' *.pac' + ' *.sa' \n    return ' ; ' + tar_cmd\n  }\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          }
        ],
        "sbg:latestRevision": 32,
        "sbg:sbgMaintained": false,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/vladimirk/bwa:0.7.13",
            "dockerImageId": "2f813371e803"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n  GB_1 = 1024*1024*1024\n  reads_size = $job.inputs.reference.size\n\n  if(!reads_size) { reads_size = GB_1 }\n  \n  if($job.inputs.total_memory){\n    return $job.inputs.total_memory * 1024\n  } else {\n    return (parseInt(1.5 * reads_size / (1024*1024)))\n  }\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          }
        ],
        "sbg:contributors": [
          "admin",
          "sevenbridges"
        ],
        "label": "BWA INDEX",
        "sbg:license": "GNU Affero General Public License v3.0, MIT License",
        "sbg:validationErrors": [],
        "sbg:links": [
          {
            "id": "http://bio-bwa.sourceforge.net/",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/lh3/bwa",
            "label": "Source code"
          },
          {
            "id": "http://bio-bwa.sourceforge.net/bwa.shtml",
            "label": "Wiki"
          },
          {
            "id": "http://sourceforge.net/projects/bio-bwa/",
            "label": "Download"
          },
          {
            "id": "http://www.ncbi.nlm.nih.gov/pubmed/19451168",
            "label": "Publication"
          }
        ],
        "sbg:modifiedOn": 1469619149,
        "stdout": "",
        "sbg:toolkit": "BWA",
        "sbg:toolkitVersion": "0.7.13",
        "sbg:categories": [
          "Indexing",
          "FASTA-Processing"
        ],
        "sbg:revision": 32,
        "sbg:id": "admin/sbg-public-data/bwa-index/32",
        "stdin": "",
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine",
            "class": "ExpressionEngineRequirement"
          }
        ],
        "class": "CommandLineTool",
        "x": 802.5000000000002,
        "y": 43.02083969116212,
        "cwlVersion": "sbg:draft-2",
        "sbg:image_url": null,
        "sbg:job": {
          "allocatedResources": {
            "mem": 1536,
            "cpu": 1
          },
          "inputs": {
            "bwt_construction": "bwtsw",
            "reference": {
              "path": "/path/to/the/reference.fasta",
              "size": 0,
              "secondaryFiles": [
                {
                  "path": ".amb"
                },
                {
                  "path": ".ann"
                },
                {
                  "path": ".bwt"
                },
                {
                  "path": ".pac"
                },
                {
                  "path": ".sa"
                }
              ],
              "class": "File"
            },
            "total_memory": null,
            "add_64_to_fasta_name": true,
            "block_size": 0,
            "prefix_of_the_index_to_be_output": "prefix"
          }
        },
        "sbg:modifiedBy": "admin",
        "successCodes": [],
        "baseCommand": [
          {
            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return 'echo Index files passed without any processing!'\n  }\n  else{\n    index_cmd = '/opt/bwa-0.7.13/bwa index '+ reference_file + ' '\n    return index_cmd\n  }\n}",
            "class": "Expression",
            "engine": "#cwl-js-engine"
          }
        ]
      },
      "inputs": [
        {
          "default": 15,
          "id": "#BWA_INDEX.total_memory"
        },
        {
          "id": "#BWA_INDEX.reference",
          "source": [
            "#reference"
          ]
        },
        {
          "id": "#BWA_INDEX.prefix_of_the_index_to_be_output"
        },
        {
          "id": "#BWA_INDEX.bwt_construction"
        },
        {
          "id": "#BWA_INDEX.block_size"
        },
        {
          "id": "#BWA_INDEX.add_64_to_fasta_name"
        }
      ]
    },
    {
      "sbg:x": 392.5000000000001,
      "outputs": [
        {
          "id": "#SBG_Prepare_Tumor_Normal.output_reads"
        }
      ],
      "id": "#SBG_Prepare_Tumor_Normal",
      "sbg:y": 215.5208587646485,
      "run": {
        "sbg:cmdPreview": "python prepare_tumor_normal.py",
        "sbg:createdOn": 1474548848,
        "sbg:createdBy": "marko_kalinic",
        "description": "",
        "outputs": [
          {
            "type": [
              "null",
              {
                "items": "File",
                "type": "array",
                "name": "output_reads"
              }
            ],
            "sbg:fileTypes": "FASTQ,FQ,FASTQ.GZ,FQ.GZ",
            "id": "#output_reads",
            "description": "Array of tuples of paired FASTQ files, qualities adjusted and metadata updated.",
            "label": "Prepared reads"
          }
        ],
        "temporaryFailCodes": [],
        "id": "marko_kalinic/bms-msi-dev/sbg-prepare-tumor-normal/3",
        "sbg:project": "marko_kalinic/bms-msi-dev",
        "sbg:image_url": null,
        "arguments": [],
        "sbg:revisionsInfo": [
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "marko_kalinic",
            "sbg:modifiedOn": 1474548848,
            "sbg:revision": 0
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "marko_kalinic",
            "sbg:modifiedOn": 1474549168,
            "sbg:revision": 1
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "marko_kalinic",
            "sbg:modifiedOn": 1474550023,
            "sbg:revision": 2
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "marko_kalinic",
            "sbg:modifiedOn": 1474550425,
            "sbg:revision": 3
          }
        ],
        "sbg:sbgMaintained": false,
        "class": "CommandLineTool",
        "stdin": "",
        "label": "SBG Prepare Tumor Normal",
        "sbg:validationErrors": [],
        "sbg:job": {
          "allocatedResources": {
            "mem": 1000,
            "cpu": 1
          },
          "inputs": {
            "tumor_sample_reads": [
              {
                "path": "/path/to/tumor_sample_reads-1.ext",
                "size": 0,
                "secondaryFiles": [],
                "class": "File"
              },
              {
                "path": "/path/to/tumor_sample_reads-2.ext",
                "size": 0,
                "secondaryFiles": [],
                "class": "File"
              }
            ],
            "normal_sample_reads": [
              {
                "path": "/path/to/normal_sample_reads-1.ext",
                "size": 0,
                "secondaryFiles": [],
                "class": "File"
              },
              {
                "path": "/path/to/normal_sample_reads-2.ext",
                "size": 0,
                "secondaryFiles": [],
                "class": "File"
              }
            ]
          }
        },
        "sbg:modifiedOn": 1474550425,
        "stdout": "",
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": 1000
          },
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/marko_kalinic/sci-python:2.7",
            "dockerImageId": ""
          }
        ],
        "sbg:revision": 3,
        "sbg:id": "marko_kalinic/bms-msi-dev/sbg-prepare-tumor-normal/3",
        "sbg:contributors": [
          "marko_kalinic"
        ],
        "requirements": [
          {
            "class": "CreateFileRequirement",
            "fileDef": [
              {
                "fileContent": "import argparse\nimport json\nimport os\nimport gzip\nfrom math import log10\nimport itertools as it\nimport sys\n\n###\n# Taken from SBG Adjust Qualities\n###\n\n\nclass myGzipFile(gzip.GzipFile):\n    def __enter__(self, *args, **kwargs):\n        if self.fileobj is None:\n            raise ValueError(\"I/O operation on closed GzipFile object\")\n        return self\n\n    def __exit__(self, *args, **kwargs):\n        self.close()\n\n\ndef extremes(a, b):\n    if a is False:\n        return b, b\n    return min(a[0], b), max(a[1], b)\n\n\ndef walk_qualities(f, sample_size=1000):\n    for i in xrange(sample_size * 4):\n        try:\n            line = f.next()\n        except StopIteration:\n            return\n        if i % 4 == 3:\n            yield line.rstrip(\"\\n\\r\")\n\n\ndef sniff(path):\n    with open(path, 'rb') as f:\n        gz = f.read(2) == '\\x1f\\x8b'\n    opn = myGzipFile if gz else open\n    with opn(path) as f:\n        return get_scale(*map(ord, reduce(extremes, it.chain(*walk_qualities(f)), False)))\n\n\ndef get_scale(ord_min, ord_max):\n    options = {\n        'illumina13': (64, 105),\n        'illumina15': (66, 105),\n        'sanger': (33, 126),\n        'solexa': (59, 105),\n    }\n    fits = [(k, v) for k, v in options.iteritems() if v[0] <= ord_min and v[1] >= ord_max]\n    if not fits:\n        message = 'Quality scale for range (%s, %s) not found.' % (ord_min, ord_max)\n        raise RuntimeError(message)\n        # Return narrowest range\n    return reduce(lambda a, b: a if a[1][1] - a[1][0] < b[1][1] - b[1][0] else b, fits)[0]\n\n\ndef qsolexa(x):\n    return chr(int(round(10 * log10(10.0**((ord(x)-64)/10.0)+1))) + 33)\n\n\ndef qillumina13(x):\n    return chr(ord(x) - 31)\n\n\ndef qillumina15(x):\n    return chr(ord(x) - 31) if ord(x)-64 > 2 else chr(33)\n\n\ndef adjust_quality(input_file):\n\n    base_name = input_file[input_file.rfind('/') + 1:input_file.rfind('.') if input_file.rfind('.') != -1 else None]\n    l_ext = base_name.split('.')[-1].lower()\n    if l_ext == 'fastq' or l_ext == 'fq':\n        base_name = base_name[:base_name.rfind('.')]\n    output_file = base_name + '.std.fastq'\n\n    meta_qual = sniff(input_file)\n\n    if meta_qual == 'illumina13':\n        proc = qillumina13\n    elif meta_qual == 'illumina15':\n        proc = qillumina15\n    elif meta_qual == 'solexa':\n        proc = qsolexa\n    else:\n        proc = None\n\n    if proc is not None:\n        with open(input_file, 'rb') as f:\n            gz = f.read(2) == '\\x1f\\x8b'\n        open_gz = myGzipFile if gz else open\n        with open(output_file, 'w') as out:\n            for i, line in enumerate(open_gz(input_file)):\n                if i % 4 == 3:\n                    line = line.strip()\n                    converted = ''.join(map(proc, line))\n                    out.write(converted + '\\n')\n                else:\n                    out.write(line)\n        contents = 'Processed {}: Original fastq quality scale format was {}, and was converted to sanger.\\n'.format(input_file, meta_qual)\n    else:\n        if input_file.rfind('.gz') == len(input_file) - 3:\n            output_file += '.gz'\n        os.rename(input_file, output_file)\n        contents = 'Processed {}: original fastq quality scale format was sanger/illumina18. No conversion performed.\\n'.format(input_file)\n\n    sys.stderr.write(contents)  # Write conversion to error log\n\n    return output_file\n\n###\n# This tool's contrib\n###\n\n\ndef prepare_output_dict(job_dict):\n    \"\"\"\n    Prepares CWL output, adding custom metadata to the input files.\n    :param job_dict: A dictionary derived from the job.json file.\n    :return: A dictionary suitable for dumping into the CWL output JSON.\n    \"\"\"\n    cwl_out = {'output_reads': []}\n\n    tumor_reads = job_dict['inputs']['tumor_sample_reads']\n    if not isinstance(tumor_reads, list):\n        tumor_reads = [tumor_reads]\n    for item in tumor_reads:\n        item['metadata']['tn_type'] = 'tumor'\n    cwl_out['output_reads'].append(tumor_reads)\n\n    try:\n        normal_reads = job_dict['inputs']['normal_sample_reads']\n    except KeyError:\n        normal_reads = None\n    if normal_reads:\n        if not isinstance(normal_reads, list):\n            normal_reads = [normal_reads]\n        for item in normal_reads:\n            item['metadata']['tn_type'] = 'normal'\n        cwl_out['output_reads'].append(normal_reads)\n\n    return cwl_out\n\n\nif __name__ == '__main__':\n\n    parser = argparse.ArgumentParser(description='This tool performs quality adjustment of input FASTQ reads, '\n                                                 'sorts them according to tumor/normal status, adds this information '\n                                                 'into a custom metadata field (\"tn_type\") and prepares the CWL output '\n                                                 'json so that the output is an array of arrays, suitable for downstream '\n                                                 'scattering at tools expecting to receive an array of paired-end FASTQ'\n                                                 'files.')\n    parser.add_argument('--job_json', help='Name of the JSON describing the metadata for this job', default='job.json')\n    parser.add_argument('--cwl_out_json', help='Name of the file where output metadata should be stored',\n                        default='cwl.output.json')\n\n    args = parser.parse_args()\n\n    with open(args.job_json) as job_json_suppl:\n        job_json_dict = json.load(job_json_suppl)\n\n    out_dict = prepare_output_dict(job_json_dict)\n\n    for tup in out_dict['output_reads']:\n        for out_file in tup:\n            qual = out_file['metadata'].get('quality_scale')\n            if not qual or (qual != 'sanger' and qual != 'illumina18'):\n                new_file_name = adjust_quality(out_file['path'])\n                out_file['name'] = new_file_name\n                out_file['path'] = os.getcwd() + '/' + new_file_name\n                out_file['size'] = os.path.getsize(new_file_name)\n                out_file['metadata']['quality_scale'] = 'sanger'\n\n    with open(args.cwl_out_json, 'w') as out_json_writer:\n        json.dump(out_dict, out_json_writer, indent=2)",
                "filename": "prepare_tumor_normal.py"
              }
            ]
          }
        ],
        "sbg:latestRevision": 3,
        "y": 215.5208587646485,
        "cwlVersion": "sbg:draft-2",
        "x": 392.5000000000001,
        "inputs": [
          {
            "sbg:stageInput": "link",
            "description": "One or more FASTQ files obtained for the tumor sample.",
            "required": true,
            "id": "#tumor_sample_reads",
            "sbg:fileTypes": "FASTQ,FQ,FASTQ.GZ,FQ.GZ",
            "type": [
              {
                "items": "File",
                "type": "array",
                "name": "tumor_sample_reads"
              }
            ],
            "label": "Tumor sample reads"
          },
          {
            "sbg:stageInput": "link",
            "description": "One or more FASTQ files obtained for the normal sample.",
            "required": false,
            "id": "#normal_sample_reads",
            "sbg:fileTypes": "FASTQ,FQ,FASTQ.GZ,FQ.GZ",
            "type": [
              "null",
              {
                "items": "File",
                "type": "array",
                "name": "normal_sample_reads"
              }
            ],
            "label": "Normal sample reads"
          }
        ],
        "sbg:modifiedBy": "marko_kalinic",
        "successCodes": [],
        "baseCommand": [
          "python",
          "prepare_tumor_normal.py"
        ]
      },
      "inputs": [
        {
          "id": "#SBG_Prepare_Tumor_Normal.tumor_sample_reads",
          "source": [
            "#tumor_sample_reads"
          ]
        },
        {
          "id": "#SBG_Prepare_Tumor_Normal.normal_sample_reads",
          "source": [
            "#normal_sample_reads"
          ]
        }
      ]
    },
    {
      "sbg:x": 1175.0000000000002,
      "outputs": [
        {
          "id": "#lobSTR_Allelotype_4_0_6.vcf"
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.allelotype_stats"
        }
      ],
      "id": "#lobSTR_Allelotype_4_0_6",
      "sbg:y": 93.02085876464845,
      "scatter": "#lobSTR_Allelotype_4_0_6.bams",
      "run": {
        "sbg:revisionsInfo": [
          {
            "sbg:revisionNotes": "Copy of marko_kalinic/lobstr-4-0-5-dev/lobstr-allelotype-4-0-5/8",
            "sbg:modifiedBy": "marko_kalinic",
            "sbg:modifiedOn": 1467648622,
            "sbg:revision": 0
          },
          {
            "sbg:revisionNotes": "Copy of marko_kalinic/lobstr-4-0-5-dev/lobstr-allelotype-4-0-5/9",
            "sbg:modifiedBy": "marko_kalinic",
            "sbg:modifiedOn": 1467718715,
            "sbg:revision": 1
          },
          {
            "sbg:revisionNotes": "metadata added",
            "sbg:modifiedBy": "nikola_tesic",
            "sbg:modifiedOn": 1484309656,
            "sbg:revision": 2
          },
          {
            "sbg:revisionNotes": "metadata added",
            "sbg:modifiedBy": "nikola_tesic",
            "sbg:modifiedOn": 1484309686,
            "sbg:revision": 3
          }
        ],
        "sbg:cmdPreview": "tar -xf hg19.lobSTR_v3.0.2.ref.tar && /opt/lobSTR-4.0.6/bin/allelotype --command classify --bam /path/to/tmp.aligned.bam --out tmp --index-prefix hg19.lobSTR_v3.0.2.ref/lobSTR_ --strinfo hg19.lobSTR_v3.0.2.ref_strinfo.tab --noise_model /path/to/illumina.v3.pcrfree  --noweb",
        "sbg:createdOn": 1467648622,
        "description": "lobSTR is a toolkit for profiling Short Tandem Repeats (STRs) from high throughput sequencing data.\n\nlobSTR Allelotype determines the most likely allelotype for each STR locus by integrating information from the aligned reads, taking into account the expected PCR stutter noise. The latter is estimated using a model of stutter noise distribution, trained on sequencing data from haploid chromosomes. The user is referred to the Supplemental Material of the original publication for a detailed description of the model. A model trained on Illumina PCR-free data forms part of the distribution and is available on the platform.\n\nlobSTR Allelotype takes aligned reads in BAM format, a lobSTR reference/index bundle, and noise model files as inputs, and produces a VCF file containing variant alleles, alongside information on the coverage, and number of reads agreeing and disagreeing with a given call. The initial set of calls can further be filtered using lobSTR Filter VCF tool.\n\nAlthough lobSTR Allelotype is best suited for analyzing reads aligned by lobSTR Aligner, BAMs produces by external aligners can also be used; further information regarding the best practices in using lobSTR with alignments produced by BWA MEM can be found on the [toolkit's website](http://lobstr.teamerlich.org/best-practices-bwamem.html).\n\n#### Common issues\n\n##### Sorting BAM input files\nlobSTR Allelotype requires that the input BAM files are sorted (by coordinates) and indexed. The BAM input port, thus, expects that an index file (prefix.BAM.BAI) is present in project files, alongside the sorted BAM file listed as input. lobSTR Aligner will automatically output the sorted BAM and the associated BAI files, but if an external aligner was used, the output should be sorted and indexed prior to being used with lobSTR Allelotype, by using a tools such as Samtools sort.\n\n##### Chromosome naming\nSeveral input parameters of lobSTR Allelotype (e.g. --chrom, --haploid) take chromosome names as arguments. It is important to note the difference in naming conventions between index/reference bundles based on hg19 and GRCh37 as the former will use the 'chrX', and the latter 'X' form. If the wrong one is used, output from lobSTR Allelotype might be empty, or the haploid calling might not get enforced.",
        "sbg:toolAuthor": "Melissa Gymrek, Yaniv Erlich et al., Erlich Lab, New York Genome Center",
        "sbg:createdBy": "marko_kalinic",
        "temporaryFailCodes": [],
        "id": "marko_kalinic/lobstr-4-0-6-demo/lobstr-allelotype-4-0-6/3",
        "inputs": [
          {
            "sbg:category": "Input and output options",
            "description": "Custom sttuter noise model trained using lobSTR AllelotypeTrain. This file and the associated step model file must have the same names (differing only in the extension).",
            "required": true,
            "id": "#stutter_model",
            "sbg:fileTypes": "STUTTERMODEL",
            "type": [
              "File"
            ],
            "label": "Stutter model"
          },
          {
            "sbg:category": "Input and output options",
            "description": "Custom step noise model trained using lobSTR AllelotypeTrain. This file and the associated stutter model file must have the same names (differing only in the extension).",
            "required": true,
            "id": "#step_model",
            "sbg:fileTypes": "STEPMODEL",
            "type": [
              "File"
            ],
            "label": "Step model"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--unit",
              "position": 9
            },
            "sbg:category": "Read filtering options",
            "sbg:toolDefaultValue": "False",
            "description": "Filter reads differing by a non-integer number of repeat copies from reference.",
            "id": "#require_multiplets",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Require integer STR copy variation"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--realign",
              "position": 20
            },
            "sbg:category": "Alignment options",
            "sbg:toolDefaultValue": "False",
            "description": "Redo local realignment. Useful if using alignments generated by other tools.",
            "id": "#realign",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Redo local alignment"
          },
          {
            "type": [
              "null",
              "string"
            ],
            "sbg:category": "Input and output options",
            "id": "#out_prefix",
            "description": "Prefix for output file names.",
            "label": "Prefix for output files"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--no-rmdup",
              "position": 6
            },
            "sbg:category": "Read filtering options",
            "sbg:toolDefaultValue": "False",
            "description": "Don't remove PCR duplicates before allelotyping.",
            "id": "#no_rm_dupl",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Don't remove PCR duplicates"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--dont-include-pl",
              "position": 26
            },
            "sbg:category": "Input and output options",
            "sbg:toolDefaultValue": "False",
            "description": "Do not print the PL field in the VCF file. Makes VCF smaller.",
            "id": "#no_include_pl_vcf",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Do not print the PL field in the VCF file"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--min-read-end-match",
              "position": 13
            },
            "sbg:category": "Read filtering options",
            "sbg:toolDefaultValue": "15",
            "description": "Filter reads whose alignments don't exactly match the reference for at least the specified number of bases at both read ends.",
            "id": "#min_read_end_match",
            "type": [
              "null",
              "int"
            ],
            "label": "Minimum matched bases in read ends"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--min-het-freq",
              "position": 17
            },
            "sbg:category": "Options for calculating allelotypes",
            "sbg:toolDefaultValue": "0.10",
            "description": "Minimum frequency of a variant allele to make a heterozygous call.",
            "id": "#min_het_freq",
            "type": [
              "null",
              "float"
            ],
            "label": "Minimum frequency for a heterozygous call"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--min-bp-before-indel",
              "position": 12
            },
            "sbg:category": "Read filtering options",
            "sbg:toolDefaultValue": "7",
            "description": "Filter reads with an indel occurring less than the specified number of bases from either read end.",
            "id": "#min_bp_before_indel",
            "type": [
              "null",
              "int"
            ],
            "label": "Minimum bases preceding an indel"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--min-border",
              "position": 15
            },
            "sbg:category": "Read filtering options",
            "sbg:toolDefaultValue": "5",
            "description": "Filter reads that do not extend past both ends of the STR region by at least the specified number of bases. To include partially spanning reads, specify a large negative number.",
            "id": "#min_border",
            "type": [
              "null",
              "int"
            ],
            "label": "Minimum length of flanking regions"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--maximal-end-match",
              "position": 14
            },
            "sbg:category": "Read filtering options",
            "sbg:toolDefaultValue": "5",
            "description": "Filter reads whose prefix/suffix matches to reference are less than or equal to those obtained when shifting the read ends by distances within the specified numer of bases.",
            "id": "#maximal_end_match",
            "type": [
              "null",
              "int"
            ],
            "label": "Maximal end matches"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--max-repeats-in-ends",
              "position": 21
            },
            "sbg:category": "Read filtering options",
            "sbg:toolDefaultValue": "-1",
            "description": "Filter reads with more than the specified number of occurrences of repeat motifs in the 4*period bp on either end of the read. -1 means no filter is applied.",
            "id": "#max_repeats_ends",
            "type": [
              "null",
              "int"
            ],
            "label": "Maximum number of STRs in read ends"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--max-matedist",
              "position": 11
            },
            "sbg:category": "Read filtering options",
            "sbg:toolDefaultValue": "100000",
            "description": "Filter reads with a mate distance larger than the specified numer of bases.",
            "id": "#max_matedist",
            "type": [
              "null",
              "int"
            ],
            "label": "Maximum mate distance"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--mapq",
              "position": 10
            },
            "sbg:category": "Read filtering options",
            "sbg:toolDefaultValue": "100",
            "description": "Maximum allowed MAPQ score calculated as the sum of qualities at base mismatches.",
            "id": "#max_mapq",
            "type": [
              "null",
              "int"
            ],
            "label": "Maximum mismatched MAPQ score"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--max-diff-ref",
              "position": 8
            },
            "sbg:category": "Read filtering options",
            "sbg:toolDefaultValue": "50",
            "description": "Filter reads differing from the reference allele by more than this number of bases.",
            "id": "#max_diff_ref",
            "type": [
              "null",
              "int"
            ],
            "label": "Maximum difference in length"
          },
          {
            "sbg:stageInput": "copy",
            "sbg:category": "Input and output options",
            "description": "lobSTR index bundle for the respective reference genome.",
            "required": true,
            "id": "#index",
            "sbg:fileTypes": "TAR",
            "type": [
              "File"
            ],
            "label": "lobSTR index bundle"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--include-gl",
              "position": 25
            },
            "sbg:category": "Input and output options",
            "sbg:toolDefaultValue": "False",
            "description": "Include the GL field in the VCF file.",
            "id": "#include_gl_vcf",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Include GL fields in VCF output"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--haploid",
              "position": 19
            },
            "sbg:category": "Options for calculating allelotypes",
            "description": "Comma-separated list of chromosomes that should be forced to have homozygous calls. Specify 'all' if the organism is haploid. Will be applied to all samples.",
            "id": "#haploid",
            "type": [
              "null",
              "string"
            ],
            "label": "Chromosomes for homozygous calls"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--gridk",
              "position": 18
            },
            "sbg:category": "Options for calculating allelotypes",
            "sbg:toolDefaultValue": "0",
            "description": "Search genotype grid including all observed alleles +/- the specified number of kbp.",
            "id": "#gridk",
            "type": [
              "null",
              "int"
            ],
            "label": "Search genotype grid"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--filter-reads-with-n",
              "position": 24
            },
            "sbg:category": "Read filtering options",
            "sbg:toolDefaultValue": "False",
            "description": "Filter reads that have one or more N bases.",
            "id": "#filter_reads_with_n",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Filter reads with N bases"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--filter-mapq0",
              "position": 22
            },
            "sbg:category": "Read filtering options",
            "sbg:toolDefaultValue": "False",
            "description": "Filter reads with map quality 0. Only use this option for alignments not generated by lobSTR.",
            "id": "#filter_mapq0",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Filter reads with map quality 0"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--filter-clipped",
              "position": 23
            },
            "sbg:category": "Read filtering options",
            "sbg:toolDefaultValue": "False",
            "description": "Filter reads with hard or soft clipped bases at the ends.",
            "id": "#filter_clipped",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Filter clipped reads"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--chrom",
              "position": 7
            },
            "sbg:category": "Read filtering options",
            "description": "Only look at reads from this chromosome.",
            "id": "#chromosome",
            "type": [
              "null",
              "string"
            ],
            "label": "Chromosome selection"
          },
          {
            "inputBinding": {
              "itemSeparator": ",",
              "secondaryFiles": [
                ".bai"
              ],
              "prefix": "--bam",
              "separate": true,
              "sbg:cmdInclude": true,
              "position": 1
            },
            "sbg:category": "Input and output options",
            "description": "One or more read alignment files, typically those produced by lobSTR's aligner. The BAM files need to be sorted and indexed. If several BAMs are provided, multi-sample calling will be performed and each sample should have a unique read group set.",
            "required": true,
            "id": "#bams",
            "sbg:fileTypes": "BAM",
            "type": [
              {
                "items": "File",
                "type": "array",
                "name": "bams"
              }
            ],
            "label": "BAM alignment file(s)"
          }
        ],
        "sbg:project": "marko_kalinic/lobstr-4-0-6-demo",
        "outputs": [
          {
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#bams",
              "glob": "*.vcf"
            },
            "description": "VCF file containing the called STRs.",
            "id": "#vcf",
            "sbg:fileTypes": "VCF",
            "type": [
              "null",
              "File"
            ],
            "label": "VCF output file"
          },
          {
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#bams",
              "glob": "*.stats"
            },
            "description": "Allelotype summary statistics.",
            "id": "#allelotype_stats",
            "sbg:fileTypes": "STATS",
            "type": [
              "null",
              "File"
            ],
            "label": "Run statistics"
          }
        ],
        "arguments": [
          {
            "separate": true,
            "position": 200,
            "prefix": "",
            "valueFrom": "--noweb"
          },
          {
            "separate": true,
            "position": 2,
            "prefix": "--out",
            "valueFrom": {
              "script": "{\n  var output_prefix = '';\n  \n  if ($job.inputs.out_prefix) output_prefix = $job.inputs.out_prefix;\n  \n  else {\n    var read_files = [].concat($job.inputs.bams);\n    var file_name = read_files[0].path.split('/').pop();\n    output_prefix = file_name.split('.')[0];\n    if (output_prefix.search(/[_,-][0-9]/) == output_prefix.length - 2) {\n      output_prefix = output_prefix.slice(0,-2);\n    }\n  }\n  \n  return output_prefix;\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": true,
            "position": 3,
            "prefix": "--index-prefix",
            "valueFrom": {
              "script": "{\n  var index_path = $job.inputs.index.path.split('/');\n  var file_name = index_path[index_path.length - 1];\n  var dir_name = file_name.substring(0, file_name.length - 4);\n  return dir_name + '/lobSTR_';\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": true,
            "position": 4,
            "prefix": "--strinfo",
            "valueFrom": {
              "script": "{\n  var index_path = $job.inputs.index.path.split('/');\n  var file_name = index_path[index_path.length - 1];\n  var base_name = file_name.split('.');\n  return base_name.slice(0, base_name.length - 1).join('.') + '_strinfo.tab';\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": true,
            "position": 5,
            "prefix": "--noise_model",
            "valueFrom": {
              "script": "{\n  var pos = $job.inputs.step_model.path.search(/.stepmodel/i);\n  return $job.inputs.step_model.path.slice(0,pos);\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          }
        ],
        "sbg:latestRevision": 3,
        "sbg:sbgMaintained": false,
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": 8000
          },
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/marko_kalinic/lobstr:4.0.6",
            "dockerImageId": ""
          }
        ],
        "sbg:contributors": [
          "nikola_tesic",
          "marko_kalinic"
        ],
        "label": "lobSTR Allelotype 4.0.6",
        "sbg:license": "GNU General Public License v3.0 only",
        "sbg:validationErrors": [],
        "sbg:links": [
          {
            "id": "http://lobstr.teamerlich.org/index.html",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/mgymrek/lobstr-code",
            "label": "Source Code"
          },
          {
            "id": "https://github.com/mgymrek/lobstr-code/releases/download/v4.0.6/lobSTR-4.0.6.tar.gz",
            "label": "Download"
          },
          {
            "id": "http://genome.cshlp.org/content/early/2012/04/19/gr.135780.111.abstract",
            "label": "Publication"
          }
        ],
        "sbg:modifiedOn": 1484309686,
        "stdout": "",
        "sbg:toolkit": "lobSTR",
        "sbg:toolkitVersion": "4.0.6",
        "sbg:revisionNotes": "metadata added",
        "sbg:categories": [
          "Variant-Calling"
        ],
        "sbg:revision": 3,
        "sbg:id": "marko_kalinic/lobstr-4-0-6-demo/lobstr-allelotype-4-0-6/3",
        "stdin": "",
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine",
            "class": "ExpressionEngineRequirement"
          }
        ],
        "class": "CommandLineTool",
        "x": 1175.0000000000002,
        "y": 93.02085876464845,
        "cwlVersion": "sbg:draft-2",
        "sbg:image_url": null,
        "sbg:job": {
          "allocatedResources": {
            "mem": 8000,
            "cpu": 1
          },
          "inputs": {
            "max_repeats_ends": null,
            "max_mapq": null,
            "include_gl_vcf": false,
            "bams": [
              {
                "path": "/path/to/tmp.aligned.bam",
                "size": 0,
                "secondaryFiles": [],
                "class": "File"
              }
            ],
            "chromosome": "",
            "filter_reads_with_n": false,
            "max_diff_ref": null,
            "index": {
              "path": "/path/to/hg19.lobSTR_v3.0.2.ref.tar",
              "size": 0,
              "secondaryFiles": [],
              "class": "File"
            },
            "no_include_pl_vcf": false,
            "haploid": "chrY",
            "realign": false,
            "min_read_end_match": null,
            "min_bp_before_indel": null,
            "out_prefix": "",
            "max_matedist": null,
            "gridk": null,
            "filter_clipped": false,
            "no_rm_dupl": false,
            "stutter_model": {
              "path": "/path/to/illumina.v3.pcrfree.stuttermodel",
              "size": 0,
              "secondaryFiles": [],
              "class": "File"
            },
            "min_border": null,
            "step_model": {
              "path": "/path/to/illumina.v3.pcrfree.stepmodel",
              "size": 0,
              "secondaryFiles": [],
              "class": "File"
            },
            "require_multiplets": false,
            "filter_mapq0": false,
            "min_het_freq": null,
            "maximal_end_match": null
          }
        },
        "sbg:modifiedBy": "nikola_tesic",
        "successCodes": [],
        "baseCommand": [
          {
            "script": "{\n  var file_name = $job.inputs.index.path.split('/').pop();\n  return 'tar -xf ' + file_name;\n}",
            "class": "Expression",
            "engine": "#cwl-js-engine"
          },
          "&&",
          "/opt/lobSTR-4.0.6/bin/allelotype",
          "--command",
          "classify"
        ]
      },
      "inputs": [
        {
          "id": "#lobSTR_Allelotype_4_0_6.stutter_model",
          "source": [
            "#stutter_model"
          ]
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.step_model",
          "source": [
            "#step_model"
          ]
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.require_multiplets"
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.realign"
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.out_prefix"
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.no_rm_dupl"
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.no_include_pl_vcf"
        },
        {
          "default": 10,
          "id": "#lobSTR_Allelotype_4_0_6.min_read_end_match"
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.min_het_freq"
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.min_bp_before_indel"
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.min_border"
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.maximal_end_match"
        },
        {
          "default": 3,
          "id": "#lobSTR_Allelotype_4_0_6.max_repeats_ends"
        },
        {
          "default": 10000,
          "id": "#lobSTR_Allelotype_4_0_6.max_matedist"
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.max_mapq"
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.max_diff_ref"
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.index",
          "source": [
            "#index"
          ]
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.include_gl_vcf"
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.haploid",
          "source": [
            "#haploid"
          ]
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.gridk"
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.filter_reads_with_n"
        },
        {
          "default": true,
          "id": "#lobSTR_Allelotype_4_0_6.filter_mapq0"
        },
        {
          "default": true,
          "id": "#lobSTR_Allelotype_4_0_6.filter_clipped"
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.chromosome"
        },
        {
          "id": "#lobSTR_Allelotype_4_0_6.bams",
          "source": [
            "#BWA_MEM_Bundle.aligned_reads"
          ]
        }
      ]
    },
    {
      "sbg:x": 1396.2500000000002,
      "outputs": [
        {
          "id": "#lobSTR_Filter_VCF_4_0_6.filtering_stats"
        },
        {
          "id": "#lobSTR_Filter_VCF_4_0_6.filtered_vcf"
        }
      ],
      "id": "#lobSTR_Filter_VCF_4_0_6",
      "sbg:y": -14.479160308837894,
      "scatter": "#lobSTR_Filter_VCF_4_0_6.vcf",
      "run": {
        "sbg:revisionsInfo": [
          {
            "sbg:revisionNotes": "Copy of marko_kalinic/lobstr-4-0-5-dev/lobstr-filter-vcf-4-0-5/8",
            "sbg:modifiedBy": "marko_kalinic",
            "sbg:modifiedOn": 1467648632,
            "sbg:revision": 0
          },
          {
            "sbg:revisionNotes": "metadata added",
            "sbg:modifiedBy": "nikola_tesic",
            "sbg:modifiedOn": 1484309726,
            "sbg:revision": 1
          }
        ],
        "sbg:cmdPreview": "/opt/lobSTR-4.0.6/scripts/lobSTR_filter_vcf.py --vcf /path/to/input_vcf_file.vcf  2> input_vcf_file.filtered.stats  1> input_vcf_file.filtered.vcf",
        "sbg:createdOn": 1467648632,
        "description": "lobSTR is a toolkit for profiling Short Tandem Repeats (STRs) from high throughput sequencing data.\n\nlobSTR Filter VCF enables processing of VCF output from lobSTR Allelotype runs, by applying a set of quality criteria to reduce the initial pool of calls to those of highest reliability. Recommendations for filtering calls from high coverage WGS data from the [authors' website](http://lobstr.teamerlich.org/filter-lobstr-vcfs.html#recommended) include:  \n   - Average locus coverage at least 5x  \n   - Average -log10(1-Q) at least 0.8  \n   - Call rate at least 80%  \n   - Reference allele length less than or equal to 80bp  \n   - Call coverage at least 5x  \n   - Call -log10(1-Q) at least 0.8  \n   - Absolute value of DISTENDS score at most 20  \n\n__Important: this tool will only work with VCF files generated by lobSTR Allelotype.__\n\n#### Common issues\nNone reported.",
        "sbg:toolAuthor": "Melissa Gymrek, Yaniv Erlich et al., Erlich Lab, New York Genome Center",
        "sbg:createdBy": "marko_kalinic",
        "temporaryFailCodes": [],
        "id": "marko_kalinic/lobstr-4-0-6-demo/lobstr-filter-vcf-4-0-6/1",
        "inputs": [
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--vcf",
              "position": 1
            },
            "sbg:category": "File inputs",
            "description": "Input VCF file generated by lobSTR Allelotype.",
            "required": true,
            "id": "#vcf",
            "sbg:fileTypes": "VCF",
            "type": [
              "File"
            ],
            "label": "Input VCF"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--loc-max-ref-length",
              "position": 4
            },
            "sbg:category": "Filtering criteria",
            "description": "Maximum reference length of a locus to include.",
            "id": "#loc_max_ref_length",
            "type": [
              "null",
              "int"
            ],
            "label": "Maximum reference locus length"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--loc-log-score",
              "position": 2
            },
            "sbg:category": "Filtering criteria",
            "description": "Minimum mean -log10(1-Q) cutoff to include a locus.",
            "id": "#loc_log_score",
            "type": [
              "null",
              "float"
            ],
            "label": "Minimum locus-level quality score"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--loc-cov",
              "position": 3
            },
            "sbg:category": "Filtering criteria",
            "description": "Min mean coverage to include a locus.",
            "id": "#loc_cov",
            "type": [
              "null",
              "int"
            ],
            "label": "Minimum locus coverage"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--loc-call-rate",
              "position": 5
            },
            "sbg:category": "Filtering criteria",
            "description": "Minimum call rate to include a locus.",
            "id": "#loc_call_rate",
            "type": [
              "null",
              "float"
            ],
            "label": "Minimum locus call rate"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--ignore-samples",
              "position": 9
            },
            "sbg:category": "File inputs",
            "description": "Ignore these samples when appying filters. Plain text file with one sample per line.",
            "required": false,
            "id": "#ignore_samples",
            "sbg:fileTypes": "TXT",
            "type": [
              "null",
              "File"
            ],
            "label": "Samples to ignore"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--call-log-score",
              "position": 7
            },
            "sbg:category": "Filtering criteria",
            "description": "Minimum mean -log10(1-Q) cutoff to include a call.",
            "id": "#call_log_score",
            "type": [
              "null",
              "float"
            ],
            "label": "Minimum call-level quality score"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--call-dist-end",
              "position": 6
            },
            "sbg:category": "Filtering criteria",
            "description": "Maximum mean absolute difference in distance from read ends to include a call.",
            "id": "#call_dist_end",
            "type": [
              "null",
              "float"
            ],
            "label": "Maximum deviation in read end distance"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "--call-cov",
              "position": 8
            },
            "sbg:category": "Filtering criteria",
            "description": "Minimum read coverage to include a call.",
            "id": "#call_cov",
            "type": [
              "null",
              "int"
            ],
            "label": "Minimum call coverage"
          }
        ],
        "sbg:project": "marko_kalinic/lobstr-4-0-6-demo",
        "outputs": [
          {
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#vcf",
              "glob": "*.filtered.stats"
            },
            "description": "Summary report on locus and call counts passing filtering criteria.",
            "id": "#filtering_stats",
            "sbg:fileTypes": "STATS",
            "type": [
              "null",
              "File"
            ],
            "label": "Filtering report"
          },
          {
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#vcf",
              "glob": "*.filtered.vcf"
            },
            "description": "VCF file containing the calls passing all of the specified filtering criteria.",
            "id": "#filtered_vcf",
            "sbg:fileTypes": "VCF",
            "type": [
              "null",
              "File"
            ],
            "label": "Filtered VCF file"
          }
        ],
        "arguments": [
          {
            "separate": true,
            "valueFrom": {
              "script": "{\n  // var grep_line = '| grep \"\\(:PASS\\|##\\)\" > ';\n  var input_file = $job.inputs.vcf.path.split('/').pop();\n  var output_file = input_file.slice(0, input_file.length - 4) + '.filtered.vcf';\n  \n  // return grep_line + output_file;\n  return '1> ' + output_file;\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            },
            "position": 100
          },
          {
            "separate": true,
            "valueFrom": {
              "script": "{\n  var input_file = $job.inputs.vcf.path.split('/').pop();\n  var output_file = input_file.slice(0, input_file.length - 4) + '.filtered.stats';\n  \n  return '2> ' + output_file;\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            },
            "position": 99
          }
        ],
        "sbg:latestRevision": 1,
        "sbg:sbgMaintained": false,
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": 1000
          },
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/marko_kalinic/lobstr:4.0.6",
            "dockerImageId": ""
          }
        ],
        "sbg:contributors": [
          "nikola_tesic",
          "marko_kalinic"
        ],
        "label": "lobSTR Filter VCF 4.0.6",
        "sbg:license": "GNU General Public License v3.0 only",
        "sbg:validationErrors": [],
        "sbg:links": [
          {
            "id": "http://lobstr.teamerlich.org/index.html",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/mgymrek/lobstr-code",
            "label": "Source Code"
          },
          {
            "id": "https://github.com/mgymrek/lobstr-code/releases/tag/v4.0.6",
            "label": "Download"
          },
          {
            "id": "http://genome.cshlp.org/content/early/2012/04/19/gr.135780.111.abstract",
            "label": "Publication"
          }
        ],
        "sbg:modifiedOn": 1484309726,
        "stdout": "",
        "sbg:toolkit": "lobSTR",
        "sbg:toolkitVersion": "4.0.6",
        "sbg:revisionNotes": "metadata added",
        "sbg:categories": [
          "VCF-Processing"
        ],
        "sbg:revision": 1,
        "sbg:id": "marko_kalinic/lobstr-4-0-6-demo/lobstr-filter-vcf-4-0-6/1",
        "stdin": "",
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine",
            "class": "ExpressionEngineRequirement"
          }
        ],
        "class": "CommandLineTool",
        "x": 1396.2500000000002,
        "y": -14.479160308837894,
        "cwlVersion": "sbg:draft-2",
        "sbg:image_url": null,
        "sbg:job": {
          "allocatedResources": {
            "mem": 1000,
            "cpu": 1
          },
          "inputs": {
            "loc_log_score": 0.8,
            "loc_call_rate": 0.8,
            "vcf": {
              "path": "/path/to/input_vcf_file.vcf",
              "size": 0,
              "secondaryFiles": [],
              "class": "File"
            },
            "call_cov": 5,
            "call_log_score": 0.8,
            "call_dist_end": 20,
            "loc_max_ref_length": 80,
            "loc_cov": 5
          }
        },
        "sbg:modifiedBy": "nikola_tesic",
        "successCodes": [],
        "baseCommand": [
          "/opt/lobSTR-4.0.6/scripts/lobSTR_filter_vcf.py"
        ]
      },
      "inputs": [
        {
          "id": "#lobSTR_Filter_VCF_4_0_6.vcf",
          "source": [
            "#lobSTR_Allelotype_4_0_6.vcf"
          ]
        },
        {
          "default": 80,
          "id": "#lobSTR_Filter_VCF_4_0_6.loc_max_ref_length"
        },
        {
          "default": 0.9,
          "id": "#lobSTR_Filter_VCF_4_0_6.loc_log_score"
        },
        {
          "default": 5,
          "id": "#lobSTR_Filter_VCF_4_0_6.loc_cov"
        },
        {
          "default": 0.8,
          "id": "#lobSTR_Filter_VCF_4_0_6.loc_call_rate"
        },
        {
          "id": "#lobSTR_Filter_VCF_4_0_6.ignore_samples"
        },
        {
          "default": 0.9,
          "id": "#lobSTR_Filter_VCF_4_0_6.call_log_score"
        },
        {
          "default": 20,
          "id": "#lobSTR_Filter_VCF_4_0_6.call_dist_end"
        },
        {
          "default": 5,
          "id": "#lobSTR_Filter_VCF_4_0_6.call_cov"
        }
      ]
    },
    {
      "sbg:x": 1387.5000000000002,
      "outputs": [
        {
          "id": "#MSIsensor_msi_0_2.somatic_loci"
        },
        {
          "id": "#MSIsensor_msi_0_2.msi_score"
        },
        {
          "id": "#MSIsensor_msi_0_2.germline_loci"
        },
        {
          "id": "#MSIsensor_msi_0_2.distribution"
        }
      ],
      "id": "#MSIsensor_msi_0_2",
      "sbg:y": 311.77089691162115,
      "run": {
        "sbg:revisionsInfo": [
          {
            "sbg:revisionNotes": "Copy of marko_kalinic/msisensor-0-2-demo/msisensor-msi-0-2/1",
            "sbg:modifiedBy": "marko_kalinic",
            "sbg:modifiedOn": 1474287108,
            "sbg:revision": 0
          },
          {
            "sbg:revisionNotes": "Support for pass through mode, when tumor",
            "sbg:modifiedBy": "marko_kalinic",
            "sbg:modifiedOn": 1474288872,
            "sbg:revision": 1
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "marko_kalinic",
            "sbg:modifiedOn": 1474289361,
            "sbg:revision": 2
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "marko_kalinic",
            "sbg:modifiedOn": 1474289460,
            "sbg:revision": 3
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "marko_kalinic",
            "sbg:modifiedOn": 1474367136,
            "sbg:revision": 4
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "marko_kalinic",
            "sbg:modifiedOn": 1474453473,
            "sbg:revision": 5
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "marko_kalinic",
            "sbg:modifiedOn": 1474459349,
            "sbg:revision": 6
          },
          {
            "sbg:revisionNotes": "metadata added",
            "sbg:modifiedBy": "nikola_tesic",
            "sbg:modifiedOn": 1484321112,
            "sbg:revision": 7
          }
        ],
        "sbg:cmdPreview": "/opt/msisensor-0.2/msisensor msi -b 1 -t /path/to/tumor_reads.bam -n /path/to/normal_reads.bam -d /path/to/microsats_list.txt",
        "sbg:createdOn": 1474287108,
        "description": "MSIsensor is a C++ program for automatically detecting somatic and germline variants at microsatellite regions. It computes length distributions of microsatellites per site in paired tumor and normal sequence data, subsequently using these to statistically compare observed distributions in both samples. Comprehensive testing indicates MSIsensor is an efficient and effective tool for deriving MSI status from standard tumor-normal paired sequence data.\n\nMSIsensor msi computes length distributions of homopolymers and microsatellites across specified loci and evaluates the statistical significance of the differences in distribution between normal and tumor samples. The output of the analysis are accrued distributions, lists of germline and somatic loci, as well as the percentage of somatic sites, as fraction of all sites with sufficient coverage. To run MSIsensor msi, sorted and indexed BAM files have to be provided, containing reads aligned against a chosen reference genome. This same reference sequence should be used to generate a list of homopolymers and microsatellites that are to be used in analysis; this file will be produced by MSIsensor scan.\n\n#### Common issues\n\n##### MSIsensor msi fails with exit code 139\nThis issue occurs when contigs from the reference genome, represented in the microsatellites list, are absent from the BAM/BAI supplied as input. Most often, this is caused by different chromosome naming conventions (e.g. 'chr1' vs '1') and indicates that different reference genomes were mistakenly used for aligning reads and generating the microsatellites list. However, this is also known to happen when UCSC hg19 is used as reference (consistently). Namely, 'chrM' and various 'chrUn' are present in the reference sequence, but have no reads aligned to them in the BAM/BAI files. This issue is a limitation of the tool itself and can be circumvented by manually editing the microsatellites list to include only the 22 autosomes and the sex chromosomes.",
        "sbg:toolAuthor": "Beifang Niu and Kai Ye, Washington University in St. Louis",
        "sbg:createdBy": "marko_kalinic",
        "temporaryFailCodes": [],
        "id": "marko_kalinic/bms-msi-dev/msisensor-msi-0-2/7",
        "inputs": [
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-u",
              "position": 15
            },
            "sbg:category": "Config Inputs",
            "sbg:toolDefaultValue": "500",
            "description": "Span size around homopolymer/microsatellite window for extracting reads.",
            "id": "#span_size",
            "type": [
              "null",
              "int"
            ],
            "label": "Span size"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-r",
              "position": 6
            },
            "sbg:category": "Config Inputs",
            "sbg:toolDefaultValue": "[analysis not confined to a region]",
            "description": "Choose one region for analysis. Use format chr1:10000000-20000000.",
            "id": "#region_sel",
            "type": [
              "null",
              "string"
            ],
            "label": "Region selection"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-f",
              "position": 7
            },
            "sbg:category": "Config Inputs",
            "sbg:toolDefaultValue": "0.05",
            "description": "False discovery rate (FDR) threshold for somatic sites detection.",
            "id": "#p_val",
            "type": [
              "null",
              "float"
            ],
            "label": "FDR threshold"
          },
          {
            "inputBinding": {
              "separate": true,
              "position": 4,
              "sbg:cmdInclude": true,
              "prefix": "-o",
              "valueFrom": {
                "script": "{\n  if ($job.inputs.out_prefix) return $job.inputs.out_prefix;\n  \n  var input_reads = [].concat($job.inputs.aligned_reads);\n  var base_name = '';\n  \n  for (i = 0; i < input_reads.length; i++) {\n    if (input_reads[i].metadata != null && input_reads[i].metadata['tn_type'] == 'tumor') {\n      var t_sample = input_reads[i].path.split('/').pop();\n      base_name = t_sample.slice(0, t_sample.length - 4);\n      break;\n    }\n  }\n\n  return base_name + '_msi';\n  \n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              }
            },
            "sbg:category": "Input and output options",
            "sbg:toolDefaultValue": "[same as tumor BAM]_msi",
            "description": "Prefix for output file names.",
            "id": "#out_prefix",
            "type": [
              "null",
              "string"
            ],
            "label": "Prefix for output files"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "position": 17,
              "sbg:cmdInclude": true,
              "prefix": "-y",
              "valueFrom": {
                "script": "{\n  if ($job.inputs.only_microsats) return 1;\n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              }
            },
            "sbg:category": "Input and output options",
            "sbg:toolDefaultValue": "False",
            "description": "Only output microsatellites, do not analyze homopolymers.",
            "id": "#only_microsats",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Output microsatellites only"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "position": 16,
              "sbg:cmdInclude": true,
              "prefix": "-x",
              "valueFrom": {
                "script": "{\n  if ($job.inputs.only_homopolymers) return 1;\n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              }
            },
            "sbg:category": "Input and output options",
            "sbg:toolDefaultValue": "False",
            "description": "Only output homopolymers, do not analyze microsatellites of period > 1.",
            "id": "#only_homopolymers",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Output homopolymers only"
          },
          {
            "sbg:stageInput": null,
            "sbg:category": "Config Inputs",
            "sbg:toolDefaultValue": "1",
            "description": "Threads number for parallel computing.",
            "id": "#num_threads",
            "type": [
              "null",
              "int"
            ],
            "label": "Number of threads"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-w",
              "position": 14
            },
            "sbg:category": "Config Inputs",
            "sbg:toolDefaultValue": "40",
            "description": "Upper bound on the number of microsatellite repeats in distribution analysis.",
            "id": "#ms_repeats_dist_ubound",
            "type": [
              "null",
              "int"
            ],
            "label": "Maximal microsatellite size for distribution analysis"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-s",
              "position": 13
            },
            "sbg:category": "Config Inputs",
            "sbg:toolDefaultValue": "5",
            "description": "Lower bound on the number of microsatellite repeats in distribution analysis.",
            "id": "#ms_repeats_dist_lbound",
            "type": [
              "null",
              "int"
            ],
            "label": "Minimal microsatellite size for distribution analysis"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-q",
              "position": 12
            },
            "sbg:category": "Config Inputs",
            "sbg:toolDefaultValue": "3",
            "description": "Minimal number of tandem repeats in a microsatellite to include it in MSI analysis.",
            "id": "#min_repeats",
            "type": [
              "null",
              "int"
            ],
            "label": "Minimal number of repeats"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-l",
              "position": 9
            },
            "sbg:category": "Config Inputs",
            "sbg:toolDefaultValue": "5",
            "description": "Minimal homopolymer size to include in MSI analysis.",
            "id": "#min_homopolymer_size",
            "type": [
              "null",
              "int"
            ],
            "label": "Minimal homopolymer size"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-c",
              "position": 8
            },
            "sbg:category": "Config Inputs",
            "sbg:toolDefaultValue": "20",
            "description": "Minimum read coverage for MSI analysis at a given locus. Recommended: 20 for WXS, 15 for WGS data.",
            "id": "#min_coverage",
            "type": [
              "null",
              "int"
            ],
            "label": "Coverage threshold"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-d",
              "position": 1
            },
            "sbg:category": "Input and output options",
            "description": "List of homopolymers and microsatellites.",
            "required": true,
            "id": "#microsats_list",
            "sbg:fileTypes": "TXT",
            "type": [
              "File"
            ],
            "label": "Microsatellites list"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-m",
              "position": 11
            },
            "sbg:category": "Config Inputs",
            "sbg:toolDefaultValue": "50",
            "description": "Upper bound on the homopolymer size in distribution analysis.",
            "id": "#homopolymer_dist_ubound",
            "type": [
              "null",
              "int"
            ],
            "label": "Maximal homopolymer size for distribution analysis"
          },
          {
            "sbg:stageInput": null,
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-p",
              "position": 10
            },
            "sbg:category": "Config Inputs",
            "sbg:toolDefaultValue": "10",
            "description": "Lower bound on the homopolymer size in distribution analysis.",
            "id": "#homopolymer_dist_lbound",
            "type": [
              "null",
              "int"
            ],
            "label": "Minimal homopolymer size for distribution analysis"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-e",
              "position": 5
            },
            "sbg:category": "Config Inputs",
            "description": "BED file used to confine the microsatellite instability analysis to a few regions of interest.",
            "required": false,
            "id": "#bed_file",
            "sbg:fileTypes": "BED",
            "type": [
              "null",
              "File"
            ],
            "label": "BED file for selecting analysis regions"
          },
          {
            "inputBinding": {
              "secondaryFiles": [
                ".bai"
              ],
              "sbg:cmdInclude": true,
              "valueFrom": {
                "script": "{ return ''; }",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              }
            },
            "sbg:category": "Input and output options",
            "description": "Indexed and sorted BAM files, for tumor and normal samples. If paired normal sample is not provided, the tool will give empty outputs.",
            "required": true,
            "id": "#aligned_reads",
            "sbg:fileTypes": "BAM",
            "type": [
              {
                "items": "File",
                "type": "array",
                "name": "aligned_reads"
              }
            ],
            "label": "Aligned reads from the tumor and normal samples"
          }
        ],
        "sbg:project": "marko_kalinic/bms-msi-dev",
        "outputs": [
          {
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#aligned_reads",
              "glob": {
                "script": "{\n  if ($job.inputs.out_prefix) return $job.inputs.out_prefix + '_somatic';\n  \n  var input_reads = [].concat($job.inputs.aligned_reads);\n  var base_name = '';\n  \n  for (i = 0; i < input_reads.length; i++) {\n    if (input_reads[i].metadata != null && input_reads[i].metadata['tn_type'] == 'tumor') {\n      var t_sample = input_reads[i].path.split('/').pop();\n      base_name = t_sample.slice(0, t_sample.length - 4);\n      break;\n    }\n  }\n\n  return base_name + '_msi_somatic';\n  \n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              }
            },
            "id": "#somatic_loci",
            "description": "Somatic sites detected.",
            "label": "Somatic loci"
          },
          {
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#aligned_reads",
              "glob": {
                "script": "{\n  if ($job.inputs.out_prefix) return $job.inputs.out_prefix;\n  \n  var input_reads = [].concat($job.inputs.aligned_reads);\n  var base_name = '';\n  \n  for (i = 0; i < input_reads.length; i++) {\n    if (input_reads[i].metadata != null && input_reads[i].metadata['tn_type'] == 'tumor') {\n      var t_sample = input_reads[i].path.split('/').pop();\n      base_name = t_sample.slice(0, t_sample.length - 4);\n      break;\n    }\n  }\n\n  return base_name + '_msi';\n  \n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              }
            },
            "description": "MSI score.",
            "id": "#msi_score",
            "sbg:fileTypes": "TXT",
            "type": [
              "null",
              "File"
            ],
            "label": "MSI score"
          },
          {
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#aligned_reads",
              "glob": {
                "script": "{\n  if ($job.inputs.out_prefix) return $job.inputs.out_prefix + '_germline';\n  \n  var input_reads = [].concat($job.inputs.aligned_reads);\n  var base_name = '';\n  \n  for (i = 0; i < input_reads.length; i++) {\n    if (input_reads[i].metadata != null && input_reads[i].metadata['tn_type'] == 'tumor') {\n      var t_sample = input_reads[i].path.split('/').pop();\n      base_name = t_sample.slice(0, t_sample.length - 4);\n      break;\n    }\n  }\n\n  return base_name + '_msi_germline';\n  \n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              }
            },
            "id": "#germline_loci",
            "description": "Germline sites detected.",
            "label": "Germline loci"
          },
          {
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#aligned_reads",
              "glob": {
                "script": "{\n  if ($job.inputs.out_prefix) return $job.inputs.out_prefix + '_dis';\n  \n  var input_reads = [].concat($job.inputs.aligned_reads);\n  var base_name = '';\n  \n  for (i = 0; i < input_reads.length; i++) {\n    if (input_reads[i].metadata != null && input_reads[i].metadata['tn_type'] == 'tumor') {\n      var t_sample = input_reads[i].path.split('/').pop();\n      base_name = t_sample.slice(0, t_sample.length - 4);\n      break;\n    }\n  }\n\n  return base_name + '_msi_dis';\n  \n}",
                "class": "Expression",
                "engine": "#cwl-js-engine"
              }
            },
            "id": "#distribution",
            "description": "Read count distribution across microsatellite and homopolymer lengths, for each locus specified in the input microsatellites list.",
            "label": "Distribution of microsatellite and homopolymer lengths"
          }
        ],
        "arguments": [
          {
            "separate": true,
            "prefix": "-b",
            "valueFrom": {
              "script": "{ return $job.allocatedResources.cpu }",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": true,
            "prefix": "-t",
            "valueFrom": {
              "script": "{\n  var input_reads = [].concat($job.inputs.aligned_reads);\n  var tumor_bam = '';\n  if (input_reads.length > 1) {\n    if (input_reads[0].metadata != null && \n        input_reads[0].metadata['tn_type'] == 'tumor') {\n      tumor_bam = input_reads[0].path;\n    }\n    else if (input_reads[1].metadata != null && \n             input_reads[1].metadata['tn_type'] == 'tumor') {\n      tumor_bam = input_reads[1].path;\n    }\n  }\n\n  return tumor_bam;\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": true,
            "prefix": "-n",
            "valueFrom": {
              "script": "{\n  var input_reads = [].concat($job.inputs.aligned_reads);\n  var normal_bam = '';\n  if (input_reads.length > 1) {\n    if (input_reads[0].metadata != null && \n        input_reads[0].metadata['tn_type'] == 'normal') {\n      normal_bam = input_reads[0].path;\n    }\n    else if (input_reads[1].metadata != null && \n             input_reads[1].metadata['tn_type'] == 'normal') {\n      normal_bam = input_reads[1].path;\n    }\n  }\n\n  return normal_bam;\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          }
        ],
        "sbg:latestRevision": 7,
        "sbg:sbgMaintained": false,
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": {
              "script": "{\n  if ($job.inputs.num_threads) return $job.inputs.num_threads;\n  \n  return 1;\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": 4000
          },
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/marko_kalinic/msisensor:0.2",
            "dockerImageId": ""
          }
        ],
        "sbg:contributors": [
          "nikola_tesic",
          "marko_kalinic"
        ],
        "label": "MSIsensor msi 0.2",
        "sbg:license": "MIT License",
        "sbg:validationErrors": [],
        "sbg:links": [
          {
            "id": "http://tvap.genome.wustl.edu/tools/msisensor/",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/ding-lab/msisensor",
            "label": "Source code"
          },
          {
            "id": "https://github.com/ding-lab/msisensor/archive/master.zip",
            "label": "Download"
          },
          {
            "id": "http://bioinformatics.oxfordjournals.org/content/30/7/1015",
            "label": "Publication"
          }
        ],
        "sbg:modifiedOn": 1484321112,
        "stdout": "",
        "sbg:toolkit": "MSIsensor",
        "sbg:toolkitVersion": "0.2",
        "sbg:revisionNotes": "metadata added",
        "sbg:categories": [
          "Analysis"
        ],
        "sbg:revision": 7,
        "sbg:id": "marko_kalinic/bms-msi-dev/msisensor-msi-0-2/7",
        "stdin": "",
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine",
            "class": "ExpressionEngineRequirement"
          }
        ],
        "class": "CommandLineTool",
        "x": 1387.5000000000002,
        "y": 311.77089691162115,
        "cwlVersion": "sbg:draft-2",
        "sbg:image_url": null,
        "sbg:job": {
          "allocatedResources": {
            "mem": 4000,
            "cpu": 1
          },
          "inputs": {
            "ms_repeats_dist_ubound": null,
            "only_homopolymers": false,
            "homopolymer_dist_lbound": null,
            "span_size": null,
            "out_prefix": "",
            "p_val": null,
            "microsats_list": {
              "path": "/path/to/microsats_list.txt",
              "size": 0,
              "secondaryFiles": [],
              "class": "File"
            },
            "min_homopolymer_size": null,
            "homopolymer_dist_ubound": null,
            "only_microsats": false,
            "min_coverage": null,
            "region_sel": "",
            "ms_repeats_dist_lbound": null,
            "num_threads": 0,
            "min_repeats": null,
            "aligned_reads": [
              {
                "path": "/path/to/tumor_reads.bam",
                "size": 0,
                "secondaryFiles": [],
                "class": "File",
                "metadata": {
                  "tn_type": "tumor"
                }
              },
              {
                "path": "/path/to/normal_reads.bam",
                "size": 0,
                "secondaryFiles": [],
                "class": "File",
                "metadata": {
                  "tn_type": "normal"
                }
              }
            ]
          }
        },
        "sbg:modifiedBy": "nikola_tesic",
        "successCodes": [],
        "baseCommand": [
          {
            "script": "{\n  var base_cmd = '';\n  var input_reads = [].concat($job.inputs.aligned_reads);\n  var has_tumor = false;\n  var has_normal = false;\n  \n  if (input_reads.length > 1) {\n\n    for (i = 0; i < 2; i++) {\n    \tif (input_reads[i].metadata != null && input_reads[i].metadata['tn_type'] != null) {\n          if (input_reads[i].metadata['tn_type'] == 'normal') {\n            has_normal = true;\n          }\n          else if (input_reads[i].metadata['tn_type'] == 'tumor') {\n            has_tumor = true;\n          }\n        }\n    }\n  }\n      \n  if (has_tumor && has_normal) {\n    base_cmd = '/opt/msisensor-0.2/msisensor msi';\n  }\n  else {\n    base_cmd = 'echo Pass through mode, tumor BAM missing in input parameters';\n  }\n  \n  return base_cmd;\n}",
            "class": "Expression",
            "engine": "#cwl-js-engine"
          }
        ]
      },
      "inputs": [
        {
          "id": "#MSIsensor_msi_0_2.span_size"
        },
        {
          "id": "#MSIsensor_msi_0_2.region_sel"
        },
        {
          "id": "#MSIsensor_msi_0_2.p_val"
        },
        {
          "id": "#MSIsensor_msi_0_2.out_prefix"
        },
        {
          "id": "#MSIsensor_msi_0_2.only_microsats"
        },
        {
          "id": "#MSIsensor_msi_0_2.only_homopolymers"
        },
        {
          "id": "#MSIsensor_msi_0_2.num_threads"
        },
        {
          "id": "#MSIsensor_msi_0_2.ms_repeats_dist_ubound"
        },
        {
          "id": "#MSIsensor_msi_0_2.ms_repeats_dist_lbound"
        },
        {
          "id": "#MSIsensor_msi_0_2.min_repeats"
        },
        {
          "id": "#MSIsensor_msi_0_2.min_homopolymer_size"
        },
        {
          "id": "#MSIsensor_msi_0_2.min_coverage"
        },
        {
          "id": "#MSIsensor_msi_0_2.microsats_list",
          "source": [
            "#microsats_list"
          ]
        },
        {
          "id": "#MSIsensor_msi_0_2.homopolymer_dist_ubound"
        },
        {
          "id": "#MSIsensor_msi_0_2.homopolymer_dist_lbound"
        },
        {
          "id": "#MSIsensor_msi_0_2.bed_file"
        },
        {
          "id": "#MSIsensor_msi_0_2.aligned_reads",
          "source": [
            "#BWA_MEM_Bundle.aligned_reads"
          ]
        }
      ]
    },
    {
      "sbg:x": 965.0000000000002,
      "outputs": [
        {
          "id": "#BWA_MEM_Bundle.aligned_reads"
        }
      ],
      "id": "#BWA_MEM_Bundle",
      "sbg:y": 194.2708587646485,
      "scatter": "#BWA_MEM_Bundle.input_reads",
      "run": {
        "sbg:revisionsInfo": [
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1459166575,
            "sbg:revision": 0
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1459166575,
            "sbg:revision": 1
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1459166575,
            "sbg:revision": 2
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1459166575,
            "sbg:revision": 3
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1459166575,
            "sbg:revision": 4
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1459166575,
            "sbg:revision": 5
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1461762649,
            "sbg:revision": 6
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1461762649,
            "sbg:revision": 7
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1461762649,
            "sbg:revision": 8
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1461762649,
            "sbg:revision": 9
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1462904151,
            "sbg:revision": 10
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1462904151,
            "sbg:revision": 11
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1465231637,
            "sbg:revision": 12
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1466173969,
            "sbg:revision": 13
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1466173969,
            "sbg:revision": 14
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1466173969,
            "sbg:revision": 15
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884288,
            "sbg:revision": 16
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884289,
            "sbg:revision": 17
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884289,
            "sbg:revision": 18
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884289,
            "sbg:revision": 19
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884289,
            "sbg:revision": 20
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884289,
            "sbg:revision": 21
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884289,
            "sbg:revision": 22
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884289,
            "sbg:revision": 23
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884289,
            "sbg:revision": 24
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884289,
            "sbg:revision": 25
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467884289,
            "sbg:revision": 26
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468402324,
            "sbg:revision": 27
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468402324,
            "sbg:revision": 28
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468402324,
            "sbg:revision": 29
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468402324,
            "sbg:revision": 30
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468402324,
            "sbg:revision": 31
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468402324,
            "sbg:revision": 32
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468402324,
            "sbg:revision": 33
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468402325,
            "sbg:revision": 34
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468402325,
            "sbg:revision": 35
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468402325,
            "sbg:revision": 36
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468402325,
            "sbg:revision": 37
          },
          {
            "sbg:revisionNotes": "Change red port type - FIX.",
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468851105,
            "sbg:revision": 38
          },
          {
            "sbg:revisionNotes": "port renamed to reference index tar",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1469619044,
            "sbg:revision": 39
          },
          {
            "sbg:revisionNotes": "reference_index_tar renamed in other expressions.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1469619044,
            "sbg:revision": 40
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1471539421,
            "sbg:revision": 41
          },
          {
            "sbg:revisionNotes": "SortedBAM is default output type.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1471539421,
            "sbg:revision": 42
          },
          {
            "sbg:revisionNotes": "Fix for single-ended reads.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1471963087,
            "sbg:revision": 43
          },
          {
            "sbg:revisionNotes": "instanceof fix for common filename",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1471963087,
            "sbg:revision": 44
          },
          {
            "sbg:revisionNotes": "[]concat(input_reads)",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1471963087,
            "sbg:revision": 45
          },
          {
            "sbg:revisionNotes": "SortedBAM default - returned revision.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1471963087,
            "sbg:revision": 46
          },
          {
            "sbg:revisionNotes": "Fix for same common sub-strings.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1471963087,
            "sbg:revision": 47
          },
          {
            "sbg:revisionNotes": "Fix to support single FASTQ input.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1471963087,
            "sbg:revision": 48
          },
          {
            "sbg:revisionNotes": "reads_size for sorter made more robust.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1472135447,
            "sbg:revision": 49
          },
          {
            "sbg:revisionNotes": "FASTQs size use for memory and CPU estimation removed!",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1472135950,
            "sbg:revision": 50
          },
          {
            "sbg:revisionNotes": "reads size removed from estimating number of CPUs",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1472135950,
            "sbg:revision": 51
          },
          {
            "sbg:revisionNotes": "Added reference_genome metadata field to SAM/BAM.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1473164653,
            "sbg:revision": 52
          },
          {
            "sbg:revisionNotes": "BAM/SAM metadata, reference_genome in the same format as in drop down menu.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1473164653,
            "sbg:revision": 53
          },
          {
            "sbg:revisionNotes": "Added reserved number of threads as an input.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1476270158,
            "sbg:revision": 54
          },
          {
            "sbg:revisionNotes": "added piping command status check",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1477931898,
            "sbg:revision": 55
          },
          {
            "sbg:revisionNotes": "BAM index output port removed",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1480071800,
            "sbg:revision": 56
          },
          {
            "sbg:revisionNotes": "Support for files with \"HiSeq X Ten\" in platform metadata field",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1480071800,
            "sbg:revision": 57
          },
          {
            "sbg:revisionNotes": "fix platform",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1480071800,
            "sbg:revision": 58
          },
          {
            "sbg:revisionNotes": "Added RG ID as optional input parameter",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1481648021,
            "sbg:revision": 59
          },
          {
            "sbg:revisionNotes": "Description - SortedBAM is default.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1482513022,
            "sbg:revision": 60
          },
          {
            "sbg:revisionNotes": "default threads parameter set to 8",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1484824473,
            "sbg:revision": 61
          }
        ],
        "sbg:cmdPreview": "/bin/bash -c \" tar -xf reference.b37.fasta.gz.tar ;  /opt/bwa-0.7.13/bwa mem  -R '@RG\\tID:rg_id-string-value\\tPL:Illumina\\tSM:dnk_sample' -t 8  reference.b37.fasta.gz  /path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_2.gz /path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_1.gz  | /opt/samblaster/samblaster -i /dev/stdin -o /dev/stdout | /opt/sambamba_v0.6.0 view -t 8 -f bam -l 0 -S /dev/stdin | /opt/sambamba_v0.6.0 sort -t 8 -m 5GiB --tmpdir ./ -o LP6005524-DNA_C01_lane_7.sorted.converted.filtered.bam -l 5 /dev/stdin  ;declare -i pipe_statuses=(\\${PIPESTATUS[*]});len=\\${#pipe_statuses[@]};declare -i tot=0;echo \\${pipe_statuses[*]};for (( i=0; i<\\${len}; i++ ));do if [ \\${pipe_statuses[\\$i]} -ne 0 ];then tot=\\${pipe_statuses[\\$i]}; fi;done;if [ \\$tot -ne 0 ]; then >&2 echo Error in piping. Pipe statuses: \\${pipe_statuses[*]};fi; if [ \\$tot -ne 0 ]; then false;fi\"",
        "sbg:createdOn": 1459166575,
        "description": "**BWA MEM** is an algorithm designed for aligning sequence reads onto a large reference genome. BWA MEM is implemented as a component of BWA. The algorithm can automatically choose between performing end-to-end and local alignments. BWA MEM is capable of outputting multiple alignments, and finding chimeric reads. It can be applied to a wide range of read lengths, from 70 bp to several megabases. \n\nIn order to obtain possibilities for additional fast processing of aligned reads, two tools are embedded together into the same package with BWA MEM (0.7.13): Samblaster. (0.1.22) and Sambamba (v0.6.0). \nIf deduplication of alignments is needed, it can be done by setting the parameter 'Duplication'. **Samblaster** will be used internally to perform this action.\nBesides the standard BWA MEM SAM output file, BWA MEM package has been extended to support two additional output options: a BAM file obtained by piping through **Sambamba view** while filtering out the secondary alignments, as well as a Coordinate Sorted BAM option that additionally pipes the output through **Sambamba sort**, along with an accompanying .bai file produced by **Sambamba sort** as side effect. Sorted BAM is the default output of BWA MEM. Parameters responsible for these additional features are 'Filter out secondary alignments' and 'Output format'. Passing data from BWA MEM to Samblaster and Sambamba tools has been done through the pipes which saves processing times of two read and write of aligned reads into the hard drive. \n\nFor input reads fastq files of total size less than 10 GB we suggest using the default setting for parameter 'total memory' of 15GB, for larger files we suggest using 58 GB of memory and 32 CPU cores.\n\n**Important:**\nIn order to work BWA MEM Bundle requires fasta reference file accompanied with **bwa fasta indices** in TAR file.\nThere is the **known issue** with samblaster. It does not support processing when number of sequences in fasta is larger than 32768. If this is the case do not use deduplication option because the output BAM will be corrupted.",
        "sbg:toolAuthor": "Heng Li",
        "sbg:createdBy": "sevenbridges",
        "temporaryFailCodes": [],
        "id": "admin/sbg-public-data/bwa-mem-bundle-0-7-13/61",
        "inputs": [
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-v"
            },
            "sbg:category": "BWA Input/output options",
            "sbg:toolDefaultValue": "3",
            "description": "Verbose level: 1=error, 2=warning, 3=message, 4+=debugging.",
            "id": "#verbose_level",
            "type": [
              "null",
              {
                "type": "enum",
                "name": "verbose_level",
                "symbols": [
                  "1",
                  "2",
                  "3",
                  "4"
                ]
              }
            ],
            "label": "Verbose level"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-Y"
            },
            "sbg:category": "BWA Input/output options",
            "description": "Use soft clipping for supplementary alignments.",
            "id": "#use_soft_clipping",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Use soft clipping"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-U"
            },
            "sbg:category": "BWA Scoring options",
            "sbg:toolDefaultValue": "17",
            "description": "Penalty for an unpaired read pair.",
            "id": "#unpaired_read_penalty",
            "type": [
              "null",
              "int"
            ],
            "label": "Unpaired read penalty"
          },
          {
            "sbg:stageInput": null,
            "sbg:category": "Execution",
            "sbg:toolDefaultValue": "15",
            "description": "Total memory to be used by the tool in GB. It's sum of BWA, Sambamba Sort and Samblaster. For fastq files of total size less than 10GB, we suggest using the default setting of 15GB, for larger files we suggest using 58GB of memory (and 32CPU cores).",
            "id": "#total_memory",
            "type": [
              "null",
              "int"
            ],
            "label": "Total memory"
          },
          {
            "sbg:category": "Execution",
            "sbg:toolDefaultValue": "8",
            "description": "Number of threads for BWA, Samblaster and Sambamba sort process.",
            "id": "#threads",
            "type": [
              "null",
              "int"
            ],
            "label": "Threads"
          },
          {
            "inputBinding": {
              "separate": false,
              "itemSeparator": null,
              "sbg:cmdInclude": true,
              "prefix": "-I"
            },
            "sbg:category": "BWA Input/output options",
            "description": "Specify the mean, standard deviation (10% of the mean if absent), max (4 sigma from the mean if absent) and min of the insert size distribution.FR orientation only. This array can have maximum four values, where first two should be specified as FLOAT and last two as INT.",
            "id": "#speficy_distribution_parameters",
            "type": [
              "null",
              {
                "items": "float",
                "type": "array",
                "name": "speficy_distribution_parameters"
              }
            ],
            "label": "Specify distribution parameters"
          },
          {
            "type": [
              "null",
              "int"
            ],
            "sbg:category": "Execution",
            "id": "#sort_memory",
            "description": "Amount of RAM [Gb] to give to the sorting algorithm (if not provided will be set to one third of the total memory).",
            "label": "Memory for BAM sorting"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-p"
            },
            "sbg:category": "BWA Input/output options",
            "description": "Smart pairing in input FASTQ file (ignoring in2.fq).",
            "id": "#smart_pairing_in_input_fastq",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Smart pairing in input FASTQ file"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-c"
            },
            "sbg:category": "BWA Algorithm options",
            "sbg:toolDefaultValue": "500",
            "description": "Skip seeds with more than INT occurrences.",
            "id": "#skip_seeds",
            "type": [
              "null",
              "int"
            ],
            "label": "Skip seeds with more than INT occurrences"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-P"
            },
            "sbg:category": "BWA Algorithm options",
            "description": "Skip pairing; mate rescue performed unless -S also in use.",
            "id": "#skip_pairing",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Skip pairing"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-S"
            },
            "sbg:category": "BWA Algorithm options",
            "description": "Skip mate rescue.",
            "id": "#skip_mate_rescue",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Skip mate rescue"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-r"
            },
            "sbg:category": "BWA Algorithm options",
            "sbg:toolDefaultValue": "1.5",
            "description": "Look for internal seeds inside a seed longer than {-k} * FLOAT.",
            "id": "#select_seeds",
            "type": [
              "null",
              "float"
            ],
            "label": "Select seeds"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-y"
            },
            "sbg:category": "BWA Algorithm options",
            "sbg:toolDefaultValue": "20",
            "description": "Seed occurrence for the 3rd round seeding.",
            "id": "#seed_occurrence_for_the_3rd_round",
            "type": [
              "null",
              "int"
            ],
            "label": "Seed occurrence for the 3rd round"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-A"
            },
            "sbg:category": "BWA Scoring options",
            "sbg:toolDefaultValue": "1",
            "description": "Score for a sequence match, which scales options -TdBOELU unless overridden.",
            "id": "#score_for_a_sequence_match",
            "type": [
              "null",
              "int"
            ],
            "label": "Score for a sequence match"
          },
          {
            "type": [
              "null",
              "int"
            ],
            "sbg:category": "Execution",
            "id": "#sambamba_threads",
            "description": "Number of threads to pass to Sambamba sort, if used.",
            "label": "Sambamba Sort threads"
          },
          {
            "sbg:category": "BWA Read Group Options",
            "sbg:toolDefaultValue": "Inferred from metadata",
            "description": "Specify the sample ID for RG line - A human readable identifier for a sample or specimen, which could contain some metadata information. A sample or specimen is material taken from a biological entity for testing, diagnosis, propagation, treatment, or research purposes, including but not limited to tissues, body fluids, cells, organs, embryos, body excretory products, etc.",
            "id": "#rg_sample_id",
            "type": [
              "null",
              "string"
            ],
            "label": "Sample ID"
          },
          {
            "sbg:category": "BWA Read Group Options",
            "sbg:toolDefaultValue": "Inferred from metadata",
            "description": "Specify the platform unit (lane/slide) for RG line - An identifier for lanes (Illumina), or for slides (SOLiD) in the case that a library was split and ran over multiple lanes on the flow cell or slides.",
            "id": "#rg_platform_unit_id",
            "type": [
              "null",
              "string"
            ],
            "label": "Platform unit ID"
          },
          {
            "sbg:category": "BWA Read Group Options",
            "sbg:toolDefaultValue": "Inferred from metadata",
            "description": "Specify the version of the technology that was used for sequencing, which will be placed in RG line.",
            "id": "#rg_platform",
            "type": [
              "null",
              {
                "type": "enum",
                "name": "rg_platform",
                "symbols": [
                  "454",
                  "Helicos",
                  "Illumina",
                  "Solid",
                  "IonTorrent"
                ]
              }
            ],
            "label": "Platform"
          },
          {
            "type": [
              "null",
              "string"
            ],
            "sbg:category": "BWA Read Group Options",
            "id": "#rg_median_fragment_length",
            "description": "Specify the median fragment length for RG line.",
            "label": "Median fragment length"
          },
          {
            "sbg:category": "BWA Read Group Options",
            "sbg:toolDefaultValue": "Inferred from metadata",
            "description": "Specify the identifier for the sequencing library preparation, which will be placed in RG line.",
            "id": "#rg_library_id",
            "type": [
              "null",
              "string"
            ],
            "label": "Library ID"
          },
          {
            "sbg:category": "Configuration",
            "sbg:toolDefaultValue": "1",
            "description": "Read group ID",
            "id": "#rg_id",
            "type": [
              "null",
              "string"
            ],
            "label": "Read group ID"
          },
          {
            "type": [
              "null",
              "string"
            ],
            "sbg:category": "BWA Read Group Options",
            "id": "#rg_data_submitting_center",
            "description": "Specify the data submitting center for RG line.",
            "label": "Data submitting center"
          },
          {
            "sbg:stageInput": null,
            "sbg:category": "Configuration",
            "sbg:toolDefaultValue": "1",
            "description": "Reserved number of threads on the instance used by scheduler.",
            "id": "#reserved_threads",
            "type": [
              "null",
              "int"
            ],
            "label": "Reserved number of threads on the instance"
          },
          {
            "sbg:stageInput": "link",
            "sbg:category": "Input files",
            "description": "Reference fasta file with BWA index files packed in TAR.",
            "required": true,
            "id": "#reference_index_tar",
            "sbg:fileTypes": "TAR",
            "type": [
              "File"
            ],
            "label": "Reference Index TAR"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-x"
            },
            "sbg:category": "BWA Scoring options",
            "description": "Sequencing technology-specific settings; Setting -x changes multiple parameters unless overriden. pacbio: -k17 -W40 -r10 -A1 -B1 -O1 -E1 -L0  (PacBio reads to ref). ont2d: -k14 -W20 -r10 -A1 -B1 -O1 -E1 -L0  (Oxford Nanopore 2D-reads to ref). intractg: -B9 -O16 -L5  (intra-species contigs to ref).",
            "id": "#read_type",
            "type": [
              "null",
              {
                "type": "enum",
                "name": "read_type",
                "symbols": [
                  "pacbio",
                  "ont2d",
                  "intractg"
                ]
              }
            ],
            "label": "Sequencing technology-specific settings"
          },
          {
            "sbg:category": "BWA Read Group Options",
            "sbg:toolDefaultValue": "Constructed from per-attribute parameters or inferred from metadata.",
            "description": "Read group header line such as '@RG\\tID:foo\\tSM:bar'.  This value takes precedence over per-attribute parameters.",
            "id": "#read_group_header",
            "type": [
              "null",
              "string"
            ],
            "label": "Read group header"
          },
          {
            "type": [
              "null",
              "string"
            ],
            "sbg:category": "Configuration",
            "id": "#output_name",
            "description": "Name of the output BAM file.",
            "label": "Output SAM/BAM file name"
          },
          {
            "inputBinding": {
              "separate": false,
              "itemSeparator": ",",
              "sbg:cmdInclude": true,
              "prefix": "-h"
            },
            "sbg:category": "BWA Input/output options",
            "sbg:toolDefaultValue": "[5, 200]",
            "description": "If there are <INT hits with score >80% of the max score, output all in XA. This array should have no more than two values.",
            "id": "#output_in_xa",
            "type": [
              "null",
              {
                "items": "int",
                "type": "array"
              }
            ],
            "label": "Output in XA"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-V"
            },
            "sbg:category": "BWA Input/output options",
            "description": "Output the reference FASTA header in the XR tag.",
            "id": "#output_header",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Output header"
          },
          {
            "sbg:category": "Execution",
            "sbg:toolDefaultValue": "SortedBAM",
            "description": "Specify output format (Sorted BAM option will output coordinate sorted BAM).",
            "id": "#output_format",
            "type": [
              "null",
              {
                "type": "enum",
                "name": "output_format",
                "symbols": [
                  "SAM",
                  "BAM",
                  "SortedBAM"
                ]
              }
            ],
            "label": "Output format"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-a"
            },
            "sbg:category": "BWA Input/output options",
            "description": "Output all alignments for SE or unpaired PE.",
            "id": "#output_alignments",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Output alignments"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-B"
            },
            "sbg:category": "BWA Scoring options",
            "sbg:toolDefaultValue": "4",
            "description": "Penalty for a mismatch.",
            "id": "#mismatch_penalty",
            "type": [
              "null",
              "int"
            ],
            "label": "Mismatch penalty"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-k"
            },
            "sbg:category": "BWA Algorithm options",
            "sbg:toolDefaultValue": "19",
            "description": "Minimum seed length for BWA MEM.",
            "id": "#minimum_seed_length",
            "type": [
              "null",
              "int"
            ],
            "label": "Minimum seed length"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-T"
            },
            "sbg:category": "BWA Input/output options",
            "sbg:toolDefaultValue": "30",
            "description": "Minimum alignment score for a read to be output in SAM/BAM.",
            "id": "#minimum_output_score",
            "type": [
              "null",
              "int"
            ],
            "label": "Minimum alignment score for a read to be output in SAM/BAM"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-m"
            },
            "sbg:category": "BWA Algorithm options",
            "sbg:toolDefaultValue": "50",
            "description": "Perform at most INT rounds of mate rescues for each read.",
            "id": "#mate_rescue_rounds",
            "type": [
              "null",
              "string"
            ],
            "label": "Mate rescue rounds"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-M"
            },
            "sbg:category": "BWA Input/output options",
            "description": "Mark shorter split hits as secondary.",
            "id": "#mark_shorter",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Mark shorter"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-H"
            },
            "sbg:category": "BWA Input/output options",
            "description": "Insert STR to header if it starts with @; or insert lines in FILE.",
            "id": "#insert_string_to_header",
            "type": [
              "null",
              "string"
            ],
            "label": "Insert string to output SAM or BAM header"
          },
          {
            "sbg:category": "Input files",
            "description": "Input sequence reads.",
            "required": true,
            "id": "#input_reads",
            "sbg:fileTypes": "FASTQ, FASTQ.GZ, FQ, FQ.GZ",
            "type": [
              {
                "items": "File",
                "type": "array",
                "name": "input_reads"
              }
            ],
            "label": "Input reads"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-j"
            },
            "sbg:category": "BWA Input/output options",
            "description": "Treat ALT contigs as part of the primary assembly (i.e. ignore <idxbase>.alt file).",
            "id": "#ignore_alt_file",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Ignore ALT file"
          },
          {
            "inputBinding": {
              "separate": false,
              "itemSeparator": ",",
              "sbg:cmdInclude": true,
              "prefix": "-O"
            },
            "sbg:category": "BWA Scoring options",
            "sbg:toolDefaultValue": "[6,6]",
            "description": "Gap open penalties for deletions and insertions. This array can't have more than two values.",
            "id": "#gap_open_penalties",
            "type": [
              "null",
              {
                "items": "int",
                "type": "array"
              }
            ],
            "label": "Gap open penalties"
          },
          {
            "inputBinding": {
              "separate": false,
              "itemSeparator": ",",
              "sbg:cmdInclude": true,
              "prefix": "-E"
            },
            "sbg:category": "BWA Scoring options",
            "sbg:toolDefaultValue": "[1,1]",
            "description": "Gap extension penalty; a gap of size k cost '{-O} + {-E}*k'. This array can't have more than two values.",
            "id": "#gap_extension_penalties",
            "type": [
              "null",
              {
                "items": "int",
                "type": "array"
              }
            ],
            "label": "Gap extension"
          },
          {
            "sbg:stageInput": null,
            "sbg:category": "Execution",
            "sbg:toolDefaultValue": "False",
            "description": "Filter out secondary alignments. Sambamba view tool will be used to perform this internally.",
            "id": "#filter_out_secondary_alignments",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Filter out secondary alignments"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-d"
            },
            "sbg:category": "BWA Algorithm options",
            "sbg:toolDefaultValue": "100",
            "description": "Off-diagonal X-dropoff.",
            "id": "#dropoff",
            "type": [
              "null",
              "int"
            ],
            "label": "Dropoff"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-D"
            },
            "sbg:category": "BWA Algorithm options",
            "sbg:toolDefaultValue": "0.50",
            "description": "Drop chains shorter than FLOAT fraction of the longest overlapping chain.",
            "id": "#drop_chains_fraction",
            "type": [
              "null",
              "float"
            ],
            "label": "Drop chains fraction"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-e"
            },
            "sbg:category": "BWA Algorithm options",
            "description": "Discard full-length exact matches.",
            "id": "#discard_exact_matches",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Discard exact matches"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-W"
            },
            "sbg:category": "BWA Algorithm options",
            "sbg:toolDefaultValue": "0",
            "description": "Discard a chain if seeded bases shorter than INT.",
            "id": "#discard_chain_length",
            "type": [
              "null",
              "int"
            ],
            "label": "Discard chain length"
          },
          {
            "sbg:category": "Samblaster parameters",
            "sbg:toolDefaultValue": "MarkDuplicates",
            "description": "Use Samblaster for finding duplicates on sequence reads.",
            "id": "#deduplication",
            "type": [
              "null",
              {
                "type": "enum",
                "name": "deduplication",
                "symbols": [
                  "None",
                  "MarkDuplicates",
                  "RemoveDuplicates"
                ]
              }
            ],
            "label": "PCR duplicate detection"
          },
          {
            "inputBinding": {
              "separate": false,
              "itemSeparator": ",",
              "sbg:cmdInclude": true,
              "prefix": "-L"
            },
            "sbg:category": "BWA Scoring options",
            "sbg:toolDefaultValue": "[5,5]",
            "description": "Penalty for 5'- and 3'-end clipping.",
            "id": "#clipping_penalty",
            "type": [
              "null",
              {
                "items": "int",
                "type": "array"
              }
            ],
            "label": "Clipping penalty"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-w"
            },
            "sbg:category": "BWA Algorithm options",
            "sbg:toolDefaultValue": "100",
            "description": "Band width for banded alignment.",
            "id": "#band_width",
            "type": [
              "null",
              "int"
            ],
            "label": "Band width"
          },
          {
            "inputBinding": {
              "separate": true,
              "sbg:cmdInclude": true,
              "prefix": "-C"
            },
            "sbg:category": "BWA Input/output options",
            "description": "Append FASTA/FASTQ comment to SAM output.",
            "id": "#append_comment",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Append comment"
          }
        ],
        "sbg:project": "admin/sbg-public-data",
        "outputs": [
          {
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#input_reads",
              "sbg:metadata": {
                "reference_genome": {
                  "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  name = reference_file.slice(0, -4) // cut .tar extension \n  \n  name_list = name.split('.')\n  ext = name_list[name_list.length-1]\n\n  if (ext == 'gz' || ext == 'GZ'){\n    a = name_list.pop() // strip fasta.gz\n    a = name_list.pop()\n  } else\n    a = name_list.pop() //strip only fasta/fa\n  \n  return name_list.join('.')\n  \n}",
                  "class": "Expression",
                  "engine": "#cwl-js-engine"
                }
              },
              "secondaryFiles": [
                ".bai",
                "^.bai"
              ],
              "glob": "{*.sam,*.bam}"
            },
            "description": "Aligned reads.",
            "id": "#aligned_reads",
            "sbg:fileTypes": "SAM, BAM",
            "type": [
              "null",
              "File"
            ],
            "label": "Aligned SAM/BAM"
          }
        ],
        "arguments": [
          {
            "separate": false,
            "position": 111,
            "prefix": "",
            "valueFrom": {
              "script": "{ \n     ///////////////////////////////////////////\n    ///  SAMBAMBA VIEW   //////////////////////\n   ///////////////////////////////////////////\nfunction common_substring(a,b) {\n  var i = 0;\n  \n  while(a[i] === b[i] && i < a.length)\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n  \n   // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n    input_2 = input_1\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n\n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){ \n    name = full_name\n\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n  \n  // Read number of threads if defined\n  if ($job.inputs.sambamba_threads){\n    threads = $job.inputs.sambamba_threads\n  }\n  else if ($job.inputs.threads){\n    threads = $job.inputs.threads\n  }\n  else { threads = 8 }\n  \n  if ($job.inputs.filter_out_secondary_alignments){\n    filt_sec = ' --filter \\'not secondary_alignment\\' '\n  }\n  else {filt_sec=' '}\n   \n  // Set output command\n  sambamba_path = '/opt/sambamba_v0.6.0'\n  if ($job.inputs.output_format == 'BAM') {\n    return \"| \" + sambamba_path + \" view -t \"+ threads + filt_sec + \"-f bam -S /dev/stdin -o \"+ name + \".bam\"\n  }\n  else if ($job.inputs.output_format == 'SAM'){ // SAM\n    return \"> \" + name + \".sam\"\n  }\n  else { // SortedBAM is considered default\n    return \"| \" + sambamba_path + \" view -t \"+ threads + filt_sec + \"-f bam -l 0 -S /dev/stdin\"\n  }\n\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": false,
            "valueFrom": {
              "script": "{\n  ///////////////////////////////////////////\n ///  SAMBAMBA SORT   //////////////////////\n///////////////////////////////////////////\n  \nfunction common_substring(a,b) {\n  var i = 0;\n  while(a[i] === b[i] && i < a.length)\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n\n   // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n    input_2 = input_1\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n  \n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){\n    name = full_name\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n\n  //////////////////////////\n  // Set sort memory size\n  \n  reads_size = 0 // Not used because of situations when size does not exist!\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ \n    suggested_memory = 4\n    suggested_cpus = 1\n  }\n  else if(reads_size < 10 * GB_1){ \n    suggested_memory = 15\n    suggested_cpus = 8\n  }\n  else { \n    suggested_memory = 58 \n    suggested_cpus = 31\n  }\n  \n  \n  if(!$job.inputs.total_memory){ total_memory = suggested_memory }\n  else{ total_memory = $job.inputs.total_memory }\n\n  // TODO:Rough estimation, should be fine-tuned!\n  if(total_memory > 16){ sorter_memory = parseInt(total_memory / 3) }\n  else{ sorter_memory = 5 }\n          \n  if ($job.inputs.sort_memory){\n    sorter_memory_string = $job.inputs.sort_memory +'GiB'\n  }\n  else sorter_memory_string = sorter_memory + 'GiB' \n  \n  // Read number of threads if defined  \n  suggested_cpus = 8\n  if ($job.inputs.sambamba_threads){\n    threads = $job.inputs.sambamba_threads\n  }\n  else if ($job.inputs.threads){\n    threads = $job.inputs.threads\n  }\n  else threads = suggested_cpus\n  \n  sambamba_path = '/opt/sambamba_v0.6.0'\n  \n  // SortedBAM is considered default\n  if (!(($job.inputs.output_format == 'BAM') || ($job.inputs.output_format == 'SAM'))){\n    cmd = \"| \" + sambamba_path + \" sort -t \" + threads\n    return cmd + \" -m \"+sorter_memory_string+\" --tmpdir ./ -o \"+ name +\".bam -l 5 /dev/stdin\"\n  }\n  else return \"\"\n}\n  \n",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            },
            "position": 112
          },
          {
            "separate": true,
            "valueFrom": {
              "script": "{\n    ///////////////////////////////////////////\n    ///  SAMBLASTER      //////////////////////\n   ///////////////////////////////////////////\n  if ($job.inputs.deduplication == \"MarkDuplicates\"){\n    return \"| /opt/samblaster/samblaster -i /dev/stdin -o /dev/stdout\"\n  }\n  else if ($job.inputs.deduplication == \"RemoveDuplicates\"){\n    return \"| /opt/samblaster/samblaster -r -i /dev/stdin -o /dev/stdout\"\n  }\n  else{\n   return \"\" \n  }\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            },
            "position": 110
          },
          {
            "separate": true,
            "valueFrom": {
              "script": "{\n  \n  if($job.inputs.read_group_header){\n  \treturn '-R ' + $job.inputs.read_group_header\n  }\n    \n  function add_param(key, val){\n    if(!val){\n      return\n\t}\n    param_list.push(key + ':' + val)\n  }\n\n  param_list = []\n\n  // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n  }\n  \n  //Read metadata for input reads\n  read_metadata = input_1.metadata\n  if(!read_metadata) read_metadata = []\n\n  if($job.inputs.rg_id){\n    add_param('ID', $job.inputs.rg_id)\n  }\n  else {\n    add_param('ID', '1')\n  } \n   \n  \n  if($job.inputs.rg_data_submitting_center){\n  \tadd_param('CN', $job.inputs.rg_data_submitting_center)\n  }\n  else if('data_submitting_center' in  read_metadata){\n  \tadd_param('CN', read_metadata.data_submitting_center)\n  }\n  \n  if($job.inputs.rg_library_id){\n  \tadd_param('LB', $job.inputs.rg_library_id)\n  }\n  else if('library_id' in read_metadata){\n  \tadd_param('LB', read_metadata.library_id)\n  }\n  \n  if($job.inputs.rg_median_fragment_length){\n  \tadd_param('PI', $job.inputs.rg_median_fragment_length)\n  }\n\n  \n  if($job.inputs.rg_platform){\n  \tadd_param('PL', $job.inputs.rg_platform)\n  }\n  else if('platform' in read_metadata){\n    if(read_metadata.platform == 'HiSeq X Ten'){\n      rg_platform = 'Illumina'\n    }\n    else{\n      rg_platform = read_metadata.platform\n    }\n  \tadd_param('PL', rg_platform)\n  }\n  \n  if($job.inputs.rg_platform_unit_id){\n  \tadd_param('PU', $job.inputs.rg_platform_unit_id)\n  }\n  else if('platform_unit_id' in read_metadata){\n  \tadd_param('PU', read_metadata.platform_unit_id)\n  }\n  \n  if($job.inputs.rg_sample_id){\n  \tadd_param('SM', $job.inputs.rg_sample_id)\n  }\n  else if('sample_id' in  read_metadata){\n  \tadd_param('SM', read_metadata.sample_id)\n  }\n    \n  return \"-R '@RG\\\\t\" + param_list.join('\\\\t') + \"'\"\n  \n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            },
            "position": 1
          },
          {
            "separate": true,
            "valueFrom": {
              "script": "{\n  /////// Set input reads in the correct order depending of the paired end from metadata\n    \n     // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_reads = $job.inputs.input_reads[0] // scatter mode\n  } else {\n    input_reads = $job.inputs.input_reads = [].concat($job.inputs.input_reads)\n  }\n  \n  \n  //Read metadata for input reads\n  read_metadata = input_reads[0].metadata\n  if(!read_metadata) read_metadata = []\n  \n  order = 0 // Consider this as normal order given at input: pe1 pe2\n  \n  // Check if paired end 1 corresponds to the first given read\n  if(read_metadata == []){ order = 0 }\n  else if('paired_end' in  read_metadata){ \n    pe1 = read_metadata.paired_end\n    if(pe1 != 1) order = 1 // change order\n  }\n\n  // Return reads in the correct order\n  if (input_reads.length == 1){\n    return input_reads[0].path // Only one read present\n  }\n  else if (input_reads.length == 2){\n    if (order == 0) return input_reads[0].path + ' ' + input_reads[1].path\n    else return input_reads[1].path + ' ' + input_reads[0].path\n  }\n\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            },
            "position": 101
          },
          {
            "separate": true,
            "position": 2,
            "prefix": "-t",
            "valueFrom": {
              "script": "{\n  \n  /*reads_size = 0 \n\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_threads = 1 }\n  else if(reads_size < 10 * GB_1){ suggested_threads = 8 }\n  else { suggested_threads = 31 }\n  */\n  suggested_threads = 8\n  \n  if(!$job.inputs.threads){  \treturn suggested_threads  }  \n  else{    return $job.inputs.threads  }\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": true,
            "valueFrom": {
              "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  name = reference_file.slice(0, -4) // cut .tar extension \n  \n  return name\n  \n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            },
            "position": 10
          },
          {
            "separate": true,
            "valueFrom": {
              "script": "{\n  cmd = \";declare -i pipe_statuses=(\\\\${PIPESTATUS[*]});len=\\\\${#pipe_statuses[@]};declare -i tot=0;echo \\\\${pipe_statuses[*]};for (( i=0; i<\\\\${len}; i++ ));do if [ \\\\${pipe_statuses[\\\\$i]} -ne 0 ];then tot=\\\\${pipe_statuses[\\\\$i]}; fi;done;if [ \\\\$tot -ne 0 ]; then >&2 echo Error in piping. Pipe statuses: \\\\${pipe_statuses[*]};fi; if [ \\\\$tot -ne 0 ]; then false;fi\\\"\"\n  return cmd\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            },
            "position": 10000
          }
        ],
        "sbg:latestRevision": 61,
        "sbg:sbgMaintained": false,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/vladimirk/bwa:0.7.13",
            "dockerImageId": ""
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "script": "{  \n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n\n\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_cpus = 1 }\n  else if(reads_size < 10 * GB_1){ suggested_cpus = 8 }\n  else { suggested_cpus = 31 }\n  \n  if($job.inputs.reserved_threads){ return $job.inputs.reserved_threads }\n  else if($job.inputs.threads){ return $job.inputs.threads } \n  else if($job.inputs.sambamba_threads) { return $job.inputs.sambamba_threads }\n  else{    return suggested_cpus  }\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{  \n\n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n \n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_memory = 4 }\n  else if(reads_size < 10 * GB_1){ suggested_memory = 15 }\n  else { suggested_memory = 58 }\n  \n  if($job.inputs.total_memory){  \t\n    return  $job.inputs.total_memory* 1024  \n  } \n  else if($job.inputs.sort_memory){\n    return  $job.inputs.sort_memory* 1024\n  }\n  else{  \t\n    return suggested_memory * 1024  \n  }\n}",
              "class": "Expression",
              "engine": "#cwl-js-engine"
            }
          }
        ],
        "sbg:contributors": [
          "admin",
          "sevenbridges"
        ],
        "label": "BWA MEM Bundle",
        "sbg:license": "BWA: GNU Affero General Public License v3.0, MIT License. Sambamba: GNU GENERAL PUBLIC LICENSE. Samblaster: The MIT License (MIT)",
        "sbg:validationErrors": [],
        "sbg:links": [
          {
            "id": "http://bio-bwa.sourceforge.net/",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/lh3/bwa",
            "label": "Source code"
          },
          {
            "id": "http://bio-bwa.sourceforge.net/bwa.shtml",
            "label": "Wiki"
          },
          {
            "id": "http://sourceforge.net/projects/bio-bwa/",
            "label": "Download"
          },
          {
            "id": "http://arxiv.org/abs/1303.3997",
            "label": "Publication"
          },
          {
            "id": "http://www.ncbi.nlm.nih.gov/pubmed/19451168",
            "label": "Publication BWA Algorithm"
          }
        ],
        "sbg:modifiedOn": 1484824473,
        "stdout": "",
        "sbg:toolkit": "BWA",
        "sbg:toolkitVersion": "0.7.13",
        "sbg:revisionNotes": "default threads parameter set to 8",
        "sbg:categories": [
          "Alignment",
          "FASTQ-Processing"
        ],
        "sbg:revision": 61,
        "sbg:id": "admin/sbg-public-data/bwa-mem-bundle-0-7-13/61",
        "stdin": "",
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine",
            "class": "ExpressionEngineRequirement"
          }
        ],
        "class": "CommandLineTool",
        "x": 965.0000000000002,
        "y": 194.2708587646485,
        "cwlVersion": "sbg:draft-2",
        "sbg:image_url": null,
        "sbg:job": {
          "allocatedResources": {
            "mem": 4096,
            "cpu": 3
          },
          "inputs": {
            "output_format": null,
            "rg_median_fragment_length": "",
            "rg_platform": null,
            "output_name": "",
            "threads": null,
            "filter_out_secondary_alignments": false,
            "band_width": null,
            "sort_memory": 0,
            "read_group_header": "",
            "skip_seeds": null,
            "input_reads": [
              {
                "path": "/path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_1.gz",
                "size": 30000000000,
                "secondaryFiles": [],
                "class": "File",
                "metadata": {
                  "paired_end": "2",
                  "sample_id": "dnk_sample",
                  "platform": "HiSeq X Ten"
                }
              },
              {
                "path": "/path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_2.gz"
              }
            ],
            "rg_data_submitting_center": "",
            "rg_platform_unit_id": "",
            "sambamba_threads": null,
            "rg_sample_id": "",
            "rg_id": "rg_id-string-value",
            "total_memory": null,
            "deduplication": "MarkDuplicates",
            "reserved_threads": 3,
            "rg_library_id": "",
            "reference_index_tar": {
              "path": "/path/to/reference.b37.fasta.gz.tar",
              "size": 0,
              "secondaryFiles": [
                {
                  "path": ".amb"
                },
                {
                  "path": ".ann"
                },
                {
                  "path": ".bwt"
                },
                {
                  "path": ".pac"
                },
                {
                  "path": ".sa"
                }
              ],
              "class": "File"
            }
          }
        },
        "sbg:modifiedBy": "admin",
        "successCodes": [],
        "baseCommand": [
          {
            "script": "{\n  cmd = \"/bin/bash -c \\\"\"\n  return cmd\n}",
            "class": "Expression",
            "engine": "#cwl-js-engine"
          },
          {
            "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  return 'tar -xf ' + reference_file + ' ; '\n  \n}",
            "class": "Expression",
            "engine": "#cwl-js-engine"
          },
          "/opt/bwa-0.7.13/bwa",
          "mem"
        ]
      },
      "inputs": [
        {
          "id": "#BWA_MEM_Bundle.verbose_level"
        },
        {
          "id": "#BWA_MEM_Bundle.use_soft_clipping"
        },
        {
          "id": "#BWA_MEM_Bundle.unpaired_read_penalty"
        },
        {
          "default": 15,
          "id": "#BWA_MEM_Bundle.total_memory"
        },
        {
          "default": 8,
          "id": "#BWA_MEM_Bundle.threads"
        },
        {
          "id": "#BWA_MEM_Bundle.speficy_distribution_parameters"
        },
        {
          "id": "#BWA_MEM_Bundle.sort_memory"
        },
        {
          "id": "#BWA_MEM_Bundle.smart_pairing_in_input_fastq"
        },
        {
          "id": "#BWA_MEM_Bundle.skip_seeds"
        },
        {
          "id": "#BWA_MEM_Bundle.skip_pairing"
        },
        {
          "id": "#BWA_MEM_Bundle.skip_mate_rescue"
        },
        {
          "id": "#BWA_MEM_Bundle.select_seeds"
        },
        {
          "id": "#BWA_MEM_Bundle.seed_occurrence_for_the_3rd_round"
        },
        {
          "id": "#BWA_MEM_Bundle.score_for_a_sequence_match"
        },
        {
          "id": "#BWA_MEM_Bundle.sambamba_threads"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_sample_id"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_platform_unit_id"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_platform"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_median_fragment_length"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_library_id"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_id"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_data_submitting_center"
        },
        {
          "id": "#BWA_MEM_Bundle.reserved_threads"
        },
        {
          "id": "#BWA_MEM_Bundle.reference_index_tar",
          "source": [
            "#BWA_INDEX.indexed_reference"
          ]
        },
        {
          "id": "#BWA_MEM_Bundle.read_type"
        },
        {
          "id": "#BWA_MEM_Bundle.read_group_header"
        },
        {
          "id": "#BWA_MEM_Bundle.output_name"
        },
        {
          "id": "#BWA_MEM_Bundle.output_in_xa"
        },
        {
          "id": "#BWA_MEM_Bundle.output_header"
        },
        {
          "default": "SortedBAM",
          "id": "#BWA_MEM_Bundle.output_format"
        },
        {
          "id": "#BWA_MEM_Bundle.output_alignments"
        },
        {
          "id": "#BWA_MEM_Bundle.mismatch_penalty"
        },
        {
          "id": "#BWA_MEM_Bundle.minimum_seed_length"
        },
        {
          "id": "#BWA_MEM_Bundle.minimum_output_score"
        },
        {
          "id": "#BWA_MEM_Bundle.mate_rescue_rounds"
        },
        {
          "id": "#BWA_MEM_Bundle.mark_shorter"
        },
        {
          "id": "#BWA_MEM_Bundle.insert_string_to_header"
        },
        {
          "id": "#BWA_MEM_Bundle.input_reads",
          "source": [
            "#SBG_Prepare_Tumor_Normal.output_reads"
          ]
        },
        {
          "id": "#BWA_MEM_Bundle.ignore_alt_file"
        },
        {
          "id": "#BWA_MEM_Bundle.gap_open_penalties"
        },
        {
          "id": "#BWA_MEM_Bundle.gap_extension_penalties"
        },
        {
          "default": true,
          "id": "#BWA_MEM_Bundle.filter_out_secondary_alignments"
        },
        {
          "id": "#BWA_MEM_Bundle.dropoff"
        },
        {
          "id": "#BWA_MEM_Bundle.drop_chains_fraction"
        },
        {
          "id": "#BWA_MEM_Bundle.discard_exact_matches"
        },
        {
          "id": "#BWA_MEM_Bundle.discard_chain_length"
        },
        {
          "id": "#BWA_MEM_Bundle.deduplication"
        },
        {
          "id": "#BWA_MEM_Bundle.clipping_penalty"
        },
        {
          "id": "#BWA_MEM_Bundle.band_width"
        },
        {
          "id": "#BWA_MEM_Bundle.append_comment"
        }
      ]
    },
    {
      "sbg:x": 747.5000000000001,
      "outputs": [
        {
          "id": "#FastQC_Analysis.report_zip"
        },
        {
          "id": "#FastQC_Analysis.b64html"
        }
      ],
      "id": "#FastQC_Analysis",
      "sbg:y": 383.02089691162115,
      "run": {
        "sbg:canvas_x": 228,
        "sbg:projectName": "SBG Public Data",
        "sbg:createdBy": "sevenbridges",
        "description": "The FastQC tool, developed by the Babraham Institute, analyzes sequence data from FASTQ, BAM, or SAM files. It produces a set of metrics and charts that help identify technical problems with the data. \n\nUse this pipeline on files you receive from a sequencer or a collaborator to get a general idea of how well the sequencing experiment went. Results from this pipeline can inform if and how you should proceed with your analysis.\n\n###Required inputs\n\n1. FASTQ Reads (ID: *FASTQ_reads*) - one or more FASTQ files. *Note*: In order to process these files efficient, set the number of threads on FastQC app. If it is not set, it will be set automatically based on number of input files, one CPU core per file. If the number of the files is too big (greater than the number of CPU cores on instance) the task will fail. Therefore it's advised that the user should set the \"threads\" argument of FastQC.\n\n###Outputs\n\n1. Report ZIP (ID: *report_zip*)  - ZIP archive containing FastQC html report with dependancies.\n2. FastQC Charts (ID: *b64html*) - Self-contained b64html file, enabling users to see FastQC reports on Seven Bridges platform.\n\n###Common issues\n\n1. In order to process these files efficient, set the number of threads on FastQC app. If it is not set, it will be set automatically based on number of input files, one CPU core per file. If the number of the files is too big (greater than the number of CPU cores on instance) the task will fail. Therefore it's advised that the user should set the \"threads\" argument of FastQC.\n2. If processing large number of big FASTQ files, you might hit the limit of available disk space. Before starting the workflow, check if the total input size is less than available instance disk space. If not, set the different instance, or reduce number of inputs.",
        "sbg:toolAuthor": "Seven Bridges",
        "outputs": [
          {
            "sbg:x": 625.6667522986758,
            "sbg:includeInPorts": true,
            "required": false,
            "id": "#report_zip",
            "sbg:y": 468.0002322197048,
            "type": [
              "null",
              "File"
            ],
            "source": [
              "#FastQC.report_zip"
            ],
            "label": "Report ZIP"
          },
          {
            "sbg:x": 729.0004155900901,
            "sbg:includeInPorts": true,
            "required": false,
            "id": "#b64html",
            "sbg:y": 271.6668099694836,
            "sbg:fileTypes": "HTML, B64HTML",
            "type": [
              "null",
              "File"
            ],
            "source": [
              "#SBG_Html2b64_1.b64html"
            ],
            "label": "FastQC Charts"
          }
        ],
        "sbg:sbgMaintained": false,
        "id": "https://api.sbgenomics.com/v2/apps/admin/sbg-public-data/fastqc-analysis/8/raw/",
        "steps": [
          {
            "sbg:x": 571.6667501529085,
            "outputs": [
              {
                "id": "#SBG_Html2b64_1.b64html"
              }
            ],
            "id": "#SBG_Html2b64_1",
            "sbg:y": 271.66673882802587,
            "scatter": "#SBG_Html2b64_1.input_file",
            "run": {
              "sbg:cmdPreview": "python /opt/sbg_html_to_b64.py",
              "sbg:createdOn": 1450911294,
              "description": "Tool for converting archived html output of FastQC and similar tools to b64html so it can easily be displayed in web browsers or on SBG platform.",
              "sbg:toolAuthor": "Seven Bridges",
              "hints": [
                {
                  "class": "DockerRequirement",
                  "dockerPull": "images.sbgenomics.com/mladenlsbg/sbg-html-to-b64:1.0.1",
                  "dockerImageId": "8c35d2a2d8d1"
                },
                {
                  "class": "sbg:CPURequirement",
                  "value": 1
                },
                {
                  "class": "sbg:MemRequirement",
                  "value": 1000
                }
              ],
              "sbg:createdBy": "bix-demo",
              "sbg:sbgMaintained": false,
              "id": "bix-demo/sbgtools-demo/sbg-html2b64/2",
              "sbg:id": "admin/sbg-public-data/sbg-html2b64/5",
              "sbg:project": "bix-demo/sbgtools-demo",
              "outputs": [
                {
                  "outputBinding": {
                    "sbg:inheritMetadataFrom": "#input_file",
                    "sbg:metadata": {},
                    "glob": "*b64html"
                  },
                  "description": "Output file, b64html.",
                  "id": "#b64html",
                  "sbg:fileTypes": "HTML, B64HTML",
                  "type": [
                    "null",
                    "File"
                  ],
                  "label": "B64html"
                }
              ],
              "arguments": [],
              "sbg:latestRevision": 2,
              "temporaryFailCodes": [],
              "class": "CommandLineTool",
              "sbg:contributors": [
                "bix-demo"
              ],
              "label": "SBG Html2b64",
              "sbg:license": "Apache License 2.0",
              "sbg:validationErrors": [],
              "sbg:job": {
                "allocatedResources": {
                  "mem": 1000,
                  "cpu": 1
                },
                "inputs": {
                  "input_file": {
                    "path": "input_file.ext",
                    "size": 0,
                    "secondaryFiles": [],
                    "class": "File"
                  }
                }
              },
              "sbg:modifiedOn": 1459963571,
              "stdout": "",
              "sbg:toolkit": "SBGTools",
              "sbg:toolkitVersion": "1.0",
              "sbg:categories": [
                "Converters",
                "Plotting-and-Rendering"
              ],
              "sbg:revision": 2,
              "sbg:revisionsInfo": [
                {
                  "sbg:revisionNotes": null,
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:modifiedOn": 1450911294,
                  "sbg:revision": 0
                },
                {
                  "sbg:revisionNotes": null,
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:modifiedOn": 1450911294,
                  "sbg:revision": 1
                },
                {
                  "sbg:revisionNotes": null,
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:modifiedOn": 1459963571,
                  "sbg:revision": 2
                }
              ],
              "stdin": "",
              "requirements": [],
              "x": 571.6667501529085,
              "y": 271.66673882802587,
              "cwlVersion": "sbg:draft-2",
              "sbg:image_url": null,
              "inputs": [
                {
                  "inputBinding": {
                    "separate": true,
                    "sbg:cmdInclude": true,
                    "prefix": "--input"
                  },
                  "sbg:category": "File input.",
                  "description": "Compressed archive.",
                  "required": false,
                  "id": "#input_file",
                  "sbg:fileTypes": "ZIP",
                  "type": [
                    "null",
                    "File"
                  ],
                  "label": "Input file"
                }
              ],
              "sbg:modifiedBy": "bix-demo",
              "successCodes": [],
              "baseCommand": [
                "python",
                "/opt/sbg_html_to_b64.py"
              ]
            },
            "inputs": [
              {
                "id": "#SBG_Html2b64_1.input_file",
                "source": [
                  "#FastQC.report_zip"
                ]
              }
            ]
          },
          {
            "sbg:x": 417.33336008919673,
            "outputs": [
              {
                "id": "#FastQC.report_zip"
              }
            ],
            "id": "#FastQC",
            "sbg:y": 361.00001513958,
            "run": {
              "sbg:cmdPreview": "fastqc  --noextract --outdir .  /path/to/input_fastq-1.fastq  /path/to/input_fastq-2.fastq",
              "sbg:projectName": "FastQC 0.11.4 - Demo",
              "sbg:createdBy": "bix-demo",
              "stdin": "",
              "sbg:toolAuthor": "Babraham Institute",
              "hints": [
                {
                  "class": "DockerRequirement",
                  "dockerPull": "images.sbgenomics.com/mladenlsbg/fastqc:0.11.4",
                  "dockerImageId": "759c4c8fbafd"
                },
                {
                  "class": "sbg:CPURequirement",
                  "value": {
                    "script": "{\n  // if cpus_per_job is set, it takes precedence\n  if ($job.inputs.cpus_per_job) {\n    return $job.inputs.cpus_per_job \n  }\n  // if threads parameter is set, the number of CPUs is set based on that parametere\n  else if ($job.inputs.threads) {\n    return $job.inputs.threads\n  }\n  // else the number of CPUs is determined by the number of input files, up to 7 -- default\n  else return Math.min([].concat($job.inputs.input_fastq).length,7)\n}",
                    "class": "Expression",
                    "engine": "#cwl-js-engine"
                  }
                },
                {
                  "class": "sbg:MemRequirement",
                  "value": {
                    "script": "{\n  // if memory_per_job is set, it takes precedence\n  if ($job.inputs.memory_per_job){\n    return $job.inputs.memory_per_job\n  }\n  // if threads parameter is set, memory req is set based on the number of threads\n  else if ($job.inputs.threads){\n    return 1024 + 300*$job.inputs.threads\n  }\n  // else the memory req is determined by the number of input files, up to 7 -- default\n  else return (1024 + 300*Math.min([].concat($job.inputs.input_fastq).length,7))\n}\n\n",
                    "class": "Expression",
                    "engine": "#cwl-js-engine"
                  }
                }
              ],
              "outputs": [
                {
                  "outputBinding": {
                    "sbg:inheritMetadataFrom": "#input_fastq",
                    "sbg:metadata": {
                      "__inherit__": "input_fastq"
                    },
                    "glob": "*_fastqc.zip"
                  },
                  "description": "Zip archive of the report.",
                  "id": "#report_zip",
                  "sbg:fileTypes": "ZIP",
                  "type": [
                    "null",
                    {
                      "items": "File",
                      "type": "array",
                      "name": "report_zip"
                    }
                  ],
                  "label": "Report zip"
                }
              ],
              "temporaryFailCodes": [],
              "id": "https://api.sbgenomics.com/v2/apps/bix-demo/fastqc-0-11-4-demo/fastqc-0-11-4/10/raw/",
              "inputs": [
                {
                  "inputBinding": {
                    "separate": true,
                    "itemSeparator": null,
                    "sbg:cmdInclude": true,
                    "position": 100
                  },
                  "sbg:category": "File inputs",
                  "description": "Input file.",
                  "id": "#input_fastq",
                  "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ, BAM, SAM",
                  "type": [
                    {
                      "items": "File",
                      "type": "array",
                      "name": "input_fastq"
                    }
                  ],
                  "label": "Input file"
                },
                {
                  "inputBinding": {
                    "separate": true,
                    "sbg:cmdInclude": true,
                    "prefix": "--kmers"
                  },
                  "sbg:category": "Options",
                  "sbg:toolDefaultValue": "7",
                  "description": "Specifies the length of Kmer to look for in the Kmer content module. Specified Kmer length must be between 2 and 10. Default length is 7 if not specified.",
                  "id": "#kmers",
                  "sbg:altPrefix": "-f",
                  "type": [
                    "null",
                    "int"
                  ],
                  "label": "Kmers"
                },
                {
                  "inputBinding": {
                    "separate": true,
                    "sbg:cmdInclude": true,
                    "prefix": "--limits"
                  },
                  "sbg:category": "File inputs",
                  "description": "Specifies a non-default file which contains a set of criteria which will be used to determine the warn/error limits for the various modules.  This file can also be used to selectively remove some modules from the output all together.  The format needs to mirror the default limits.txt file found in the Configuration folder.",
                  "id": "#limits_file",
                  "sbg:altPrefix": "-l",
                  "sbg:fileTypes": "TXT",
                  "type": [
                    "null",
                    "File"
                  ],
                  "label": "Limits"
                },
                {
                  "inputBinding": {
                    "separate": true,
                    "sbg:cmdInclude": true,
                    "prefix": "--adapters"
                  },
                  "sbg:category": "File inputs",
                  "description": "Specifies a non-default file which contains the list of adapter sequences which will be explicity searched against the library. The file must contain sets of named adapters in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
                  "id": "#adapters_file",
                  "sbg:altPrefix": "-a",
                  "sbg:fileTypes": "TXT",
                  "type": [
                    "null",
                    "File"
                  ],
                  "label": "Adapters"
                },
                {
                  "inputBinding": {
                    "separate": true,
                    "sbg:cmdInclude": true,
                    "prefix": "--contaminants"
                  },
                  "sbg:category": "File inputs",
                  "description": "Specifies a non-default file which contains the list of contaminants to screen overrepresented sequences against. The file must contain sets of named contaminants in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
                  "id": "#contaminants_file",
                  "sbg:altPrefix": "-c",
                  "sbg:fileTypes": "TXT",
                  "type": [
                    "null",
                    "File"
                  ],
                  "label": "Contaminants"
                },
                {
                  "inputBinding": {
                    "separate": true,
                    "sbg:cmdInclude": true,
                    "prefix": "--format"
                  },
                  "sbg:category": "Options",
                  "sbg:toolDefaultValue": "FASTQ",
                  "description": "Bypasses the normal sequence file format detection and forces the program to use the specified format.  Valid formats are BAM, SAM, BAM_mapped, SAM_mapped and FASTQ.",
                  "id": "#format",
                  "sbg:altPrefix": "-f",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "format",
                      "symbols": [
                        "bam",
                        "sam",
                        "bam_mapped",
                        "sam_mapped",
                        "fastq"
                      ]
                    }
                  ],
                  "label": "Format"
                },
                {
                  "inputBinding": {
                    "separate": false,
                    "sbg:cmdInclude": true,
                    "prefix": "--nogroup"
                  },
                  "sbg:category": "Options",
                  "description": "Disable grouping of bases for reads >50bp. All reports will show data for every base in the read.  WARNING: Using this option will cause fastqc to crash and burn if you use it on really long reads, and your plots may end up a ridiculous size. You have been warned.",
                  "id": "#nogroup",
                  "type": [
                    "null",
                    "boolean"
                  ],
                  "label": "Nogroup"
                },
                {
                  "inputBinding": {
                    "separate": false,
                    "sbg:cmdInclude": true,
                    "prefix": "--nano"
                  },
                  "sbg:category": "Options",
                  "description": "Files come from naopore sequences and are in fast5 format. In this mode you can pass in directories to process and the program will take in all fast5 files within those directories and produce a single output file from the sequences found in all files.",
                  "id": "#nano",
                  "type": [
                    "null",
                    "boolean"
                  ],
                  "label": "Nano"
                },
                {
                  "inputBinding": {
                    "separate": false,
                    "sbg:cmdInclude": true,
                    "prefix": "--casava"
                  },
                  "sbg:category": "Options",
                  "description": "Files come from raw casava output. Files in the same sample group (differing only by the group number) will be analysed as a set rather than individually. Sequences with the filter flag set in the header will be excluded from the analysis. Files must have the same names given to them by casava (including being gzipped and ending with .gz) otherwise they won't be grouped together correctly.",
                  "id": "#casava",
                  "type": [
                    "null",
                    "boolean"
                  ],
                  "label": "Casava"
                },
                {
                  "inputBinding": {
                    "separate": true,
                    "sbg:cmdInclude": true,
                    "prefix": "--threads",
                    "valueFrom": {
                      "script": "{\n//if \"threads\" is not specified\n//number of threads is determined based on number of inputs\n  if (! $job.inputs.threads){\n    $job.inputs.threads = [].concat($job.inputs.input_fastq).length\n  }\n  return Math.min($job.inputs.threads,7)\n}",
                      "class": "Expression",
                      "engine": "#cwl-js-engine"
                    }
                  },
                  "sbg:category": "Options",
                  "sbg:toolDefaultValue": "1",
                  "description": "Specifies the number of files which can be processed simultaneously.  Each thread will be allocated 250MB of memory so you shouldn't run more threads than your available memory will cope with, and not more than 6 threads on a 32 bit machine.",
                  "id": "#threads",
                  "sbg:altPrefix": "-t",
                  "type": [
                    "null",
                    "int"
                  ],
                  "label": "Threads"
                },
                {
                  "inputBinding": {
                    "separate": true,
                    "sbg:cmdInclude": true,
                    "prefix": "--quiet"
                  },
                  "sbg:category": "Options",
                  "description": "Supress all progress messages on stdout and only report errors.",
                  "id": "#quiet",
                  "sbg:altPrefix": "-q",
                  "type": [
                    "null",
                    "boolean"
                  ],
                  "label": "Quiet"
                },
                {
                  "sbg:category": "Execution parameters",
                  "sbg:toolDefaultValue": "Determined by the number of input files",
                  "description": "Number of CPUs to be allocated per execution of FastQC.",
                  "id": "#cpus_per_job",
                  "type": [
                    "null",
                    "int"
                  ],
                  "label": "Number of CPUs."
                },
                {
                  "sbg:category": "Execution parameters",
                  "sbg:toolDefaultValue": "Determined by the number of input files",
                  "description": "Amount of memory allocated per execution of FastQC job.",
                  "id": "#memory_per_job",
                  "type": [
                    "null",
                    "int"
                  ],
                  "label": "Amount of memory allocated per job execution."
                }
              ],
              "sbg:createdOn": 1450911593,
              "sbg:project": "bix-demo/fastqc-0-11-4-demo",
              "sbg:appVersion": [
                "sbg:draft-2"
              ],
              "arguments": [
                {
                  "separate": true,
                  "prefix": "",
                  "valueFrom": "--noextract"
                },
                {
                  "separate": true,
                  "prefix": "--outdir",
                  "valueFrom": "."
                }
              ],
              "sbg:revisionsInfo": [
                {
                  "sbg:revisionNotes": null,
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:modifiedOn": 1450911593,
                  "sbg:revision": 0
                },
                {
                  "sbg:revisionNotes": null,
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:modifiedOn": 1450911593,
                  "sbg:revision": 1
                },
                {
                  "sbg:revisionNotes": null,
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:modifiedOn": 1450911594,
                  "sbg:revision": 2
                },
                {
                  "sbg:revisionNotes": null,
                  "sbg:modifiedBy": "mladenlSBG",
                  "sbg:modifiedOn": 1459870965,
                  "sbg:revision": 3
                },
                {
                  "sbg:revisionNotes": null,
                  "sbg:modifiedBy": "mladenlSBG",
                  "sbg:modifiedOn": 1465990120,
                  "sbg:revision": 4
                },
                {
                  "sbg:revisionNotes": "Input categories added.",
                  "sbg:modifiedBy": "mladenlSBG",
                  "sbg:modifiedOn": 1476188095,
                  "sbg:revision": 5
                },
                {
                  "sbg:revisionNotes": "FASTQ input changed from single file to array. Added better thread handling. \n\nIMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.",
                  "sbg:modifiedBy": "mladenlSBG",
                  "sbg:modifiedOn": 1476270496,
                  "sbg:revision": 6
                },
                {
                  "sbg:revisionNotes": "FASTQ input changed from single file to array. Added better thread handling.\n\nIMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.",
                  "sbg:modifiedBy": "mladenlSBG",
                  "sbg:modifiedOn": 1476354537,
                  "sbg:revision": 7
                },
                {
                  "sbg:revisionNotes": "IMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.\"\n\nAdded automatised handling of BAM and SAM files. Also, added security measures for better automated threading handling.",
                  "sbg:modifiedBy": "mladenlSBG",
                  "sbg:modifiedOn": 1488882730,
                  "sbg:revision": 8
                },
                {
                  "sbg:revisionNotes": "Changed the file types of limits, adapters and contaminants files to be TXT, they have to be in format name[tab]sequence. Format should be similar to the one in the Configuration folder provided with FastQC, txt files.\n\n\"IMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.\"",
                  "sbg:modifiedBy": "nikola_jovanovic",
                  "sbg:modifiedOn": 1488980183,
                  "sbg:revision": 9
                },
                {
                  "sbg:revisionNotes": "* Fixed the JS expression for the CPU and Memory allocation\n* Added cpus_per_job and memory_per_job parameters\n* Removed default version for format, so the tool can handle combinations of file formats",
                  "sbg:modifiedBy": "nikola_jovanovic",
                  "sbg:modifiedOn": 1493223877,
                  "sbg:revision": 10
                }
              ],
              "sbg:categories": [
                "FASTQ-Processing",
                "Quality-Control",
                "Quantification"
              ],
              "class": "CommandLineTool",
              "sbg:latestRevision": 10,
              "label": "FastQC",
              "sbg:license": "GNU General Public License v3.0 only",
              "sbg:validationErrors": [],
              "sbg:links": [
                {
                  "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/",
                  "label": "Homepage"
                },
                {
                  "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4_source.zip",
                  "label": "Source Code"
                },
                {
                  "id": "https://wiki.hpcc.msu.edu/display/Bioinfo/FastQC+Tutorial",
                  "label": "Wiki"
                },
                {
                  "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4.zip",
                  "label": "Download"
                },
                {
                  "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc",
                  "label": "Publication"
                }
              ],
              "sbg:modifiedOn": 1493223877,
              "description": "FastQC reads a set of sequence files and produces a quality control (QC) report from each one. These reports consist of a number of different modules, each of which will help identify a different type of potential problem in your data. \n\nSince it's necessary to convert the tool report in order to show them on Seven Bridges platform, it's recommended to use [FastQC Analysis workflow instead](https://igor.sbgenomics.com/public/apps#admin/sbg-public-data/fastqc-analysis/). \n\nFastQC is a tool which takes a FASTQ file and runs a series of tests on it to generate a comprehensive QC report.  This report will tell you if there is anything unusual about your sequence.  Each test is flagged as a pass, warning, or fail depending on how far it departs from what you would expect from a normal large dataset with no significant biases.  It is important to stress that warnings or even failures do not necessarily mean that there is a problem with your data, only that it is unusual.  It is possible that the biological nature of your sample means that you would expect this particular bias in your results.\n\n### Common Issues:\n\nOutput of the tool is ZIP archive. In order to view report on Seven Bridges platform, you can use SBG Html2b64 tool. It is advised to scatter SBG Html2b64 so it would be able to process an array of files. The example can be seen in [FastQC Analysis workflow](https://igor.sbgenomics.com/public/apps#admin/sbg-public-data/fastqc-analysis/) which you can also use instead of this tool.",
              "stdout": "",
              "sbg:toolkit": "FastQC",
              "sbg:toolkitVersion": "0.11.4",
              "sbg:revisionNotes": "* Fixed the JS expression for the CPU and Memory allocation\n* Added cpus_per_job and memory_per_job parameters\n* Removed default version for format, so the tool can handle combinations of file formats",
              "sbg:revision": 10,
              "sbg:id": "admin/sbg-public-data/fastqc-0-11-4/18",
              "sbg:contributors": [
                "bix-demo",
                "nikola_jovanovic",
                "mladenlSBG"
              ],
              "requirements": [
                {
                  "requirements": [
                    {
                      "class": "DockerRequirement",
                      "dockerPull": "rabix/js-engine"
                    }
                  ],
                  "id": "#cwl-js-engine",
                  "class": "ExpressionEngineRequirement"
                }
              ],
              "sbg:sbgMaintained": false,
              "cwlVersion": "sbg:draft-2",
              "sbg:image_url": null,
              "sbg:job": {
                "allocatedResources": {
                  "mem": 1624,
                  "cpu": 2
                },
                "inputs": {
                  "format": null,
                  "threads": null,
                  "quiet": true,
                  "input_fastq": [
                    {
                      "path": "/path/to/input_fastq-1.fastq",
                      "size": 0,
                      "secondaryFiles": [],
                      "class": "File"
                    },
                    {
                      "path": "/path/to/input_fastq-2.fastq",
                      "size": 0,
                      "secondaryFiles": [],
                      "class": "File"
                    }
                  ],
                  "memory_per_job": null,
                  "cpus_per_job": null
                }
              },
              "sbg:modifiedBy": "nikola_jovanovic",
              "successCodes": [],
              "baseCommand": [
                "fastqc"
              ]
            },
            "inputs": [
              {
                "id": "#FastQC.input_fastq",
                "source": [
                  "#FASTQ_Reads"
                ]
              },
              {
                "id": "#FastQC.kmers"
              },
              {
                "id": "#FastQC.limits_file",
                "source": [
                  "#limits_file"
                ]
              },
              {
                "id": "#FastQC.adapters_file",
                "source": [
                  "#adapters_file"
                ]
              },
              {
                "id": "#FastQC.contaminants_file",
                "source": [
                  "#contaminants_file"
                ]
              },
              {
                "id": "#FastQC.format"
              },
              {
                "id": "#FastQC.nogroup"
              },
              {
                "id": "#FastQC.nano"
              },
              {
                "id": "#FastQC.casava"
              },
              {
                "id": "#FastQC.threads"
              },
              {
                "id": "#FastQC.quiet"
              },
              {
                "id": "#FastQC.cpus_per_job"
              },
              {
                "id": "#FastQC.memory_per_job"
              }
            ]
          }
        ],
        "sbg:createdOn": 1453799047,
        "sbg:project": "admin/sbg-public-data",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1453799047,
            "sbg:revision": 0
          },
          {
            "sbg:revisionNotes": "Tool updates.",
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1467984978,
            "sbg:revision": 1
          },
          {
            "sbg:revisionNotes": "Changed output names.",
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468502435,
            "sbg:revision": 2
          },
          {
            "sbg:revisionNotes": "Changed output names.",
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1468864513,
            "sbg:revision": 3
          },
          {
            "sbg:revisionNotes": "Updated with the new version of FastQC.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1476440105,
            "sbg:revision": 4
          },
          {
            "sbg:revisionNotes": "Description added.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1476965429,
            "sbg:revision": 5
          },
          {
            "sbg:revisionNotes": "Tool update.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1489067514,
            "sbg:revision": 6
          },
          {
            "sbg:revisionNotes": "Tool update (Revision 9) and pulled the inputs for limits_file, contaminants_file and adapters_file so they can be specified for the workflow.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1489067514,
            "sbg:revision": 7
          },
          {
            "sbg:revisionNotes": "Updated FastQC to revision 10.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1493298701,
            "sbg:revision": 8
          }
        ],
        "sbg:categories": [
          "Quality-Control",
          "FASTQ-Processing"
        ],
        "hints": [],
        "sbg:latestRevision": 8,
        "label": "FastQC Analysis",
        "sbg:license": "Apache License 2.0",
        "sbg:validationErrors": [],
        "sbg:links": [
          {
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/",
            "label": "Homepage"
          },
          {
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/",
            "label": "Documentation"
          }
        ],
        "sbg:modifiedOn": 1493298701,
        "sbg:toolkit": "SBGTools",
        "sbg:toolkitVersion": "1",
        "sbg:revisionNotes": "Updated FastQC to revision 10.",
        "sbg:id": "admin/sbg-public-data/fastqc-analysis/8",
        "sbg:contributors": [
          "sevenbridges",
          "admin"
        ],
        "requirements": [],
        "sbg:canvas_zoom": 0.5999999999999996,
        "class": "Workflow",
        "sbg:canvas_y": 31,
        "cwlVersion": "sbg:draft-2",
        "sbg:image_url": "https://brood.sbgenomics.com/static/admin/sbg-public-data/fastqc-analysis/8.png",
        "sbg:revision": 8,
        "sbg:modifiedBy": "admin",
        "inputs": [
          {
            "sbg:x": 190.666674176852,
            "sbg:includeInPorts": true,
            "id": "#FASTQ_Reads",
            "sbg:y": 347.6667008267519,
            "type": [
              {
                "items": "File",
                "type": "array"
              }
            ],
            "label": "FASTQ Reads"
          },
          {
            "sbg:x": 189.99996185302743,
            "id": "#limits_file",
            "sbg:y": 225.0000000000001,
            "sbg:fileTypes": "TXT",
            "type": [
              "null",
              "File"
            ],
            "label": "limits_file"
          },
          {
            "sbg:x": 191.66661580403658,
            "id": "#contaminants_file",
            "sbg:y": 471.66671752929716,
            "sbg:fileTypes": "TXT",
            "type": [
              "null",
              "File"
            ],
            "label": "contaminants_file"
          },
          {
            "sbg:x": 193.33330790201833,
            "id": "#adapters_file",
            "sbg:y": 598.3333333333336,
            "sbg:fileTypes": "TXT",
            "type": [
              "null",
              "File"
            ],
            "label": "adapters_file"
          }
        ]
      },
      "inputs": [
        {
          "id": "#FastQC_Analysis.FASTQ_Reads",
          "source": [
            "#SBG_Flatten.flat"
          ]
        },
        {
          "id": "#FastQC_Analysis.limits_file"
        },
        {
          "id": "#FastQC_Analysis.contaminants_file"
        },
        {
          "id": "#FastQC_Analysis.adapters_file"
        }
      ]
    },
    {
      "sbg:x": 536.2500000000001,
      "outputs": [
        {
          "id": "#SBG_Flatten.flat"
        }
      ],
      "id": "#SBG_Flatten",
      "sbg:y": 383.02089691162115,
      "run": {
        "sbg:cmdPreview": "python sbg-flatten.py",
        "sbg:projectName": "SBG Public Data",
        "sbg:createdBy": "sevenbridges",
        "stdin": "",
        "sbg:toolAuthor": "Ana Damljanovic/ Seven Bridges Genomics",
        "outputs": [
          {
            "id": "#flat",
            "outputBinding": {
              "sbg:metadata": {}
            },
            "type": [
              "null",
              {
                "items": "File",
                "type": "array"
              }
            ],
            "description": "All grouped files as one list.",
            "label": "All grouped files"
          }
        ],
        "temporaryFailCodes": [],
        "id": "https://api.sbgenomics.com/v2/apps/admin/sbg-public-data/sbg-flatten/3/raw/",
        "inputs": [
          {
            "sbg:stageInput": "link",
            "sbg:category": "Input files",
            "description": "Files from all SBG Group Input outputs should be provided.",
            "id": "#nested",
            "type": [
              {
                "items": "File",
                "type": "array"
              }
            ],
            "label": "Nested"
          }
        ],
        "sbg:createdOn": 1453799658,
        "sbg:project": "admin/sbg-public-data",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "arguments": [],
        "sbg:revisionsInfo": [
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1453799658,
            "sbg:revision": 0
          },
          {
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "sevenbridges",
            "sbg:modifiedOn": 1453799659,
            "sbg:revision": 1
          },
          {
            "sbg:revisionNotes": "Changed to be able to flatten irregular list of lists.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1471539420,
            "sbg:revision": 2
          },
          {
            "sbg:revisionNotes": "Recursive flattening and staging of input files added.",
            "sbg:modifiedBy": "admin",
            "sbg:modifiedOn": 1485529178,
            "sbg:revision": 3
          }
        ],
        "sbg:categories": [
          "Other"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/ana_d/sbg-flatten:2.0",
            "dockerImageId": "c0e1d93b3d76"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": 1000
          }
        ],
        "sbg:latestRevision": 3,
        "sbg:revision": 3,
        "sbg:license": "Apache License 2.0",
        "sbg:validationErrors": [],
        "sbg:job": {
          "allocatedResources": {
            "mem": 1000,
            "cpu": 1
          },
          "inputs": {
            "nested": "nested"
          }
        },
        "sbg:modifiedOn": 1485529178,
        "description": "SBG Flatten is used only with SBG Group Input app for purposes of providing grouped inputs. All SBG Group Input outputs should be passed to the \"Nested\" SBG Flatten input in order to produce the output with all grouped files as one list.",
        "stdout": "",
        "sbg:toolkit": "SBGTools",
        "sbg:toolkitVersion": "1.0",
        "sbg:revisionNotes": "Recursive flattening and staging of input files added.",
        "sbg:id": "admin/sbg-public-data/sbg-flatten/3",
        "sbg:contributors": [
          "sevenbridges",
          "admin"
        ],
        "requirements": [
          {
            "class": "CreateFileRequirement",
            "fileDef": [
              {
                "fileContent": "\"\"\"Usage: sbg-flatten.py [--injson STR] [--outjson STR]\n\nOptions:\n  -v, --version             Show version of the script\n  -h, --help                Show this help message and exit\n  --injson STR              Path to input json file [default: job.json]\n  --outjson STR             Path to output json file [default: cwl.output.json]\n\"\"\"\nimport json\nimport os\nimport docopt\n\n\ndef flatten(my_list):\n    flat_list = []\n    for i in my_list:\n        if i is None:\n            continue\n        elif type(i) != list:\n            flat_list.append(i)\n        else:\n            flat_list.extend(flatten(i))\n    return flat_list\n\nif __name__ == '__main__':\n\n    arguments = docopt.docopt(__doc__, version=1.0)\n\n    in_json = arguments['--injson']\n    out_json = arguments['--outjson']\n    \n    with open(in_json) as fp:\n        job = json.load(fp)\n\n    nested = job['inputs']['nested']\n    flat = flatten(nested)\n    print flat\n\n    new_flat = []\n    for idx, flat_file in enumerate(flat):\n        source_path = flat_file['path']\n        dest_path = os.path.join(os.curdir, os.path.basename(source_path))\n        new_flat.append(flat_file)\n        new_flat[idx]['path'] = os.path.abspath(dest_path)\n        print dest_path\n\n    with open(out_json, 'w') as fp:\n        json.dump({'flat': new_flat}, fp)",
                "filename": "sbg-flatten.py"
              }
            ]
          }
        ],
        "class": "CommandLineTool",
        "sbg:sbgMaintained": false,
        "cwlVersion": "sbg:draft-2",
        "sbg:image_url": null,
        "label": "SBG Flatten",
        "sbg:modifiedBy": "admin",
        "successCodes": [],
        "baseCommand": [
          "python",
          "sbg-flatten.py"
        ]
      },
      "inputs": [
        {
          "id": "#SBG_Flatten.nested",
          "source": [
            "#SBG_Prepare_Tumor_Normal.output_reads"
          ]
        }
      ]
    }
  ],
  "sbg:id": "nikola_tesic/poster/microsatellite-instability-profiling/1",
  "sbg:categories": [
    "DNA",
    "Variant-Calling"
  ],
  "requirements": [],
  "sbg:canvas_y": 29,
  "cwlVersion": "sbg:draft-2",
  "sbg:image_url": "https://brood.sbgenomics.com/static/nikola_tesic/poster/microsatellite-instability-profiling/1.png",
  "sbg:revision": 1,
  "sbg:modifiedBy": "nikola_tesic",
  "inputs": [
    {
      "sbg:x": 110,
      "id": "#tumor_sample_reads",
      "sbg:y": 126,
      "sbg:fileTypes": "FASTQ,FQ,FASTQ.GZ,FQ.GZ",
      "type": [
        {
          "items": "File",
          "type": "array",
          "name": "tumor_sample_reads"
        }
      ],
      "label": "tumor_sample_reads"
    },
    {
      "sbg:x": 110,
      "id": "#normal_sample_reads",
      "sbg:y": 266,
      "sbg:fileTypes": "FASTQ,FQ,FASTQ.GZ,FQ.GZ",
      "type": [
        "null",
        {
          "items": "File",
          "type": "array",
          "name": "normal_sample_reads"
        }
      ],
      "label": "normal_sample_reads"
    },
    {
      "sbg:x": 509.9999547004701,
      "id": "#reference",
      "sbg:y": 43.75000000000001,
      "sbg:fileTypes": "FASTA,FA,FA.GZ,FASTA.GZ,TAR",
      "type": [
        "File"
      ],
      "label": "reference"
    },
    {
      "sbg:x": 998.7500000000002,
      "id": "#stutter_model",
      "sbg:y": -145.00000000000003,
      "sbg:fileTypes": "STUTTERMODEL",
      "type": [
        "File"
      ],
      "label": "stutter_model"
    },
    {
      "sbg:x": 995.0000000000002,
      "id": "#step_model",
      "sbg:y": -13.749980926513672,
      "sbg:fileTypes": "STEPMODEL",
      "type": [
        "File"
      ],
      "label": "step_model"
    },
    {
      "sbg:x": 678.7499713897706,
      "id": "#index",
      "sbg:y": -117.4999809265137,
      "sbg:fileTypes": "TAR",
      "type": [
        "File"
      ],
      "label": "index"
    },
    {
      "sbg:x": 1200.0000095367434,
      "sbg:includeInPorts": true,
      "id": "#microsats_list",
      "sbg:y": 500.0000000000001,
      "sbg:fileTypes": "TXT",
      "type": [
        "null",
        "File"
      ],
      "label": "microsats_list"
    },
    {
      "sbg:category": "Options for calculating allelotypes",
      "description": "Comma-separated list of chromosomes that should be forced to have homozygous calls. Specify 'all' if the organism is haploid. Will be applied to all samples.",
      "required": false,
      "id": "#haploid",
      "type": [
        "null",
        "string"
      ],
      "label": "Chromosomes for homozygous calls"
    }
  ]
}
